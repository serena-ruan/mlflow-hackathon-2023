"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _hexToP3 = _interopRequireDefault(require("../../functions/hex_to_p3"));
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var cssVariables = function(param1) {
    var _included = param1.included, included = _included === void 0 ? true : _included, classes = param1.classes;
    var predefinedClasses = _objectSpread({}, classes, {
        current: "currentColor"
    });
    var output = [];
    var outputDP3 = [];
    if (included) {
        Object.entries(predefinedClasses).forEach(function(param) {
            var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
            if (Array.isArray(value)) {
                value.map(function(val, i) {
                    output.push("--".concat(key, "-").concat(i, ": ").concat(val, ";"));
                    outputDP3.push("--".concat(key, "-").concat(i, ": ").concat((0, _hexToP3).default(val), ";"));
                });
            } else {
                output.push("--".concat(key, ": ").concat(value, ";"));
                value === "currentColor" ? outputDP3.push("--".concat(key, ": ").concat(value, ";")) : outputDP3.push("--".concat(key, ": ").concat((0, _hexToP3).default(value), ";"));
            }
        });
        return "\n    :root { ".concat(output.join(""), " }\n\n    @supports (background-color:color(display-p3 1 1 1)){\n      :root { ").concat(outputDP3.join(""), " }\n    }\n    ");
    }
};
var _default = cssVariables;
exports.default = _default;
