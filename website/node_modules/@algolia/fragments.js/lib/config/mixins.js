"use strict";
var _functions = require("../functions");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var config = require(process.cwd() + "/fragments.config");
var classNames = function(map, className, property, responsive, hover) {
    var result = [];
    Object.entries(map).forEach(function(param) {
        var _param = _slicedToArray(param, 2), key = _param[0], val = _param[1];
        result.push(Array.isArray(property) ? hover ? ".".concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, ", .hover").concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, ":hover, .hover").concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, ":focus, { ").concat(property.map(function(prop) {
            return "".concat(prop, ": ").concat((0, _functions).getValue(key, val, false));
        }).join(""), " }") : ".".concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, " { ").concat(property.map(function(prop) {
            return "".concat(prop, ": ").concat((0, _functions).getValue(key, val, false));
        }).join(""), "}") : Array.isArray(val) ? val.map(function(value, i) {
            return hover ? ".".concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, "-").concat(i, ", .hover").concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, "-").concat(i, ":hover, .hover").concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, "-").concat(i, ":focus { ").concat(property, ": ").concat((0, _functions).getValue(key, value, i), " }") : ".".concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, "-").concat(i, " { ").concat(property, ": ").concat((0, _functions).getValue(key, value, i), " }");
        }).join("") : hover ? ".".concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, ", .hover").concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, ":hover, .hover").concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, ":focus { ").concat(property, ": ").concat((0, _functions).getValue(key, val, false), " }") : ".".concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, " { ").concat(property, ": ").concat((0, _functions).getValue(key, val, false), " }"));
    });
    if (responsive) {
        Object.entries(config.config.breakpoints).forEach(function(param1) {
            var _param1 = _slicedToArray(param1, 2), storedKey = _param1[0], storedValue = _param1[1];
            Object.entries(map).forEach(function(param) {
                var _param = _slicedToArray(param, 2), key = _param[0], val = _param[1];
                result.push("@media (min-width: ".concat(storedValue, ") {\n          ").concat(Array.isArray(property) ? ".".concat(storedKey).concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, " { ").concat(property.map(function(prop) {
                    return "".concat(prop, ": ").concat((0, _functions).getValue(key, val, false));
                }).join(""), " }") : Array.isArray(val) ? "".concat(val.map(function(value, i) {
                    return ".".concat(storedKey).concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, "-").concat(i, " { ").concat(property, ": ").concat((0, _functions).getValue(key, value, i), " }");
                }).join("")) : ".".concat(storedKey).concat((0, _functions).getOption("separator")).concat((0, _functions).getOption("namespace")).concat(className, "-").concat(key, " { ").concat(property, ": ").concat((0, _functions).getValue(key, val, false), " }"), "\n        }"));
            });
        });
    }
    return result.join("");
};
module.exports = classNames;
