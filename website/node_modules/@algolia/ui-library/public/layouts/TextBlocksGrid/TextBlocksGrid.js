"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsxRuntime classic /
/** @jsx jsx */
const react_1 = require("react");
const classnames_1 = __importDefault(require("classnames"));
const react_2 = require("@emotion/react");
const index_1 = require("../../index");
const TextBlocksGrid_css_1 = __importDefault(require("./TextBlocksGrid.css"));
const colors = __importStar(require("../../constants/colors"));
const BACKGROUND_COLORS = {
    black: 'uil-bgc-grey-900',
    dark: 'uil-bgc-grey-800',
    'light-grey': 'uil-bgc-grey-100',
    white: 'uil-bgc-white',
};
const SHADOW_COLORS = {
    black: colors.GREY_900,
    dark: colors.GREY_800,
    'light-grey': colors.GREY_100,
    white: colors.WHITE,
};
const GRID_COLORS = {
    grey: 'uil-bgc-grey-200',
    white: 'uil-bgc-white',
};
const TextWrapper = ({ item, numbered }) => {
    if (!item)
        return null;
    if (item.type && item.type.displayName === 'TextBlock') {
        const CustomTag = item.type;
        return (react_2.jsx("li", { css: numbered && TextBlocksGrid_css_1.default.item, className: classnames_1.default('uil-lis-none', numbered &&
                'uil-pos-relative uil-pt-32 uil-pl-24 lg:uil-pl-32 lg:uil-pt-48') },
            react_2.jsx(CustomTag, Object.assign({}, item.props, { className: classnames_1.default('uil-h-100p', item.props.className) }))));
    }
    throw new Error("You can only use 'TextBlock' component.");
};
const TextBlocksGrid = ({ children, columnsPerRow = 3, hasVisibleGrid, gridColor = 'grey', gridBackground = 'white', numbered = false, ...other }) => (react_2.jsx("div", Object.assign({}, other),
    react_2.jsx("ul", { className: classnames_1.default('uil-pos-relative uil-d-grid uil-m-0 uil-p-0', columnsPerRow === 2 && 'md:uil-g-2', columnsPerRow === 3 && 'md:uil-g-3', hasVisibleGrid ? GRID_COLORS[gridColor] : 'uil-ggap-48 lg:uil-ggap-80'), css: [numbered && TextBlocksGrid_css_1.default.root, hasVisibleGrid && TextBlocksGrid_css_1.default.gridGap] },
        hasVisibleGrid && (react_2.jsx("div", { css: TextBlocksGrid_css_1.default.boxShadow(SHADOW_COLORS[gridBackground]), className: "uil-pos-absolute uil-left-0 uil-top-0 uil-right-0 uil-bot-0" })),
        react_1.Children.map(children, (item, index) => (react_2.jsx(index_1.ErrorBoundary, null, hasVisibleGrid ? (react_2.jsx("div", { key: index, className: classnames_1.default('uil-pos-relative md:uil-ph-48 md:uil-pb-24 md:uil-pt-24 lg:uil-ph-48 lg:uil-pb-48 lg:uil-pt-48', index > 0 && 'uil-pt-24', index < react_1.Children.count(children) - 1 && 'uil-pb-24', hasVisibleGrid && BACKGROUND_COLORS[gridBackground]) },
            react_2.jsx(TextWrapper, { item: item, numbered: numbered }))) : (react_2.jsx(TextWrapper, { item: item, numbered: numbered }))))))));
exports.default = TextBlocksGrid;
//# sourceMappingURL=TextBlocksGrid.js.map