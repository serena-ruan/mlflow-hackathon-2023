"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("@emotion/react");
const breakpoints = __importStar(require("../../constants/breakpoints"));
const colors = __importStar(require("../../constants/colors"));
const fonts = __importStar(require("../../constants/fonts"));
exports.default = {
    root: react_1.css `
    counter-reset: numbers;
  `,
    item: react_1.css `
    &:before {
      content: counter(numbers);
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
      color: ${colors.GREY_300};
      opacity: 0.5;
      line-height: 1;
      font-size: 100px;
      font-family: ${fonts.POPPINS};
      counter-increment: numbers;
      @media (min-width: ${breakpoints.LG}) {
        font-size: 150px;
      }
    }
  `,
    boxShadow: (shadowColor) => react_1.css `
    box-shadow: inset 0 0 100px 70px ${shadowColor};
  `,
    gridGap: react_1.css `
    grid-gap: 1px;
  `,
};
//# sourceMappingURL=TextBlocksGrid.css.js.map