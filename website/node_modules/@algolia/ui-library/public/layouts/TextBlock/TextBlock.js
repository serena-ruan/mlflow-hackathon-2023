"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsxRuntime classic /
/** @jsx jsx */
const react_1 = require("react");
const classnames_1 = __importDefault(require("classnames"));
const react_2 = require("@emotion/react");
const index_1 = require("../../index");
const TextBlock_css_1 = __importDefault(require("./TextBlock.css"));
const COLORS = {
    blue: 'uil-color-nebula-500',
    green: 'uil-color-green-700',
    grey: 'uil-color-grey-800',
    orange: 'uil-color-orange-600',
    pink: 'uil-color-pink-600',
    red: 'uil-color-red-600',
    white: 'uil-color-white',
};
const TagWrapper = ({ item, index, isIconOutside }) => {
    if (!item)
        return null;
    const Tag = item.type || 'div';
    if (Tag.displayName) {
        if (Tag.displayName === 'Text' ||
            Tag.displayName === 'UserGeneratedContent' ||
            Tag.displayName === 'Card' ||
            Tag.displayName === 'Button') {
            return (react_2.jsx(Tag, Object.assign({}, item.props, { className: classnames_1.default(item.props.className, index > 0 ? 'uil-mt-8' : 'uil-mt-0', isIconOutside && 'uil-gcstart-2', 'uil-mb-0') })));
        }
        else if (Tag.displayName === 'LightCta') {
            return null;
        }
        else {
            throw new Error("You can only use 'Text', 'Card', 'LightCta' or 'UserGeneratedContent' components.");
        }
    }
    else {
        throw new Error("You can only use 'Text', 'LightCta' or 'UserGeneratedContent' components.");
    }
};
const renderText = (children, isIconOutside) => react_1.Children.map(children, (item, index) => (react_2.jsx(index_1.ErrorBoundary, { key: index },
    react_2.jsx(TagWrapper, { item: item, index: index, isIconOutside: isIconOutside }))));
const renderCta = (children, color) => react_1.Children.map(children, item => item)
    .filter(item => item.type &&
    item.type.displayName &&
    item.type.displayName === 'LightCta')
    .map((item, index) => {
    const Tag = item.type || 'div';
    return (react_2.jsx("div", { key: index, className: "uil-mt-16 uil-mb-0" },
        react_2.jsx(Tag, Object.assign({ key: item }, item.props, { color: color, withTail: true }))));
});
/** `TextBlock` component is using different components like `Text` or `LightCta`.
 * It's made to be a block of text, with a title. Correct spacing is automatically handled around the elements within the component.
 *
 * It can be used in a parent component, on `TextsRow`.
 */
const TextBlock = ({ children, color = 'blue', icon, iconPosition = 'title', iconProps = {}, label, tag: CustomTag = 'article', title, titleProps = {}, withBigTitle = false, ...other }) => {
    const { className: titleClassName, ...otherTitleProps } = titleProps;
    const { className: iconClassName, ...otherIconProps } = iconProps;
    const { className: otherClassName, ...otherProps } = other;
    const CustomIconTag = icon;
    const isIconOutside = CustomIconTag && iconPosition === 'outside';
    const iconColor = COLORS[color];
    return (react_2.jsx(CustomTag, Object.assign({}, otherProps, { className: classnames_1.default('md:uil-d-flex md:uil-fxd-column md:uil-jc-between', otherClassName) }),
        react_2.jsx("div", { css: isIconOutside ? TextBlock_css_1.default.gridContainer : undefined, className: "uil-d-grid" },
            CustomIconTag && (iconPosition === 'above' || isIconOutside) && (react_2.jsx("div", { className: "uil-mb-8" },
                react_2.jsx(CustomIconTag, Object.assign({}, otherIconProps, { className: classnames_1.default('uil-w-18 uil-h-18 lg:uil-w-24 lg:uil-h-24', iconClassName, iconColor) })))),
            !isIconOutside &&
                label &&
                (typeof label === 'string' ? (react_2.jsx(index_1.LabelText, { big: true, className: "uil-mt-0 uil-mb-8", color: color, iconProps: {
                        ...otherIconProps,
                        className: classnames_1.default(iconColor, iconClassName),
                    }, icon: iconPosition === 'label' ? icon : undefined, tag: "p" }, label)) : (react_2.jsx("div", { className: "uil-mb-8" }, label))),
            title && (react_2.jsx(index_1.Heading3, Object.assign({}, otherTitleProps, { className: classnames_1.default('uil-mt-0 uil-mb-8', titleClassName), iconProps: {
                    ...otherIconProps,
                    className: classnames_1.default(iconColor, iconClassName, iconColor),
                }, icon: iconPosition === 'title' ? icon : undefined }), withBigTitle ? (react_2.jsx("span", { className: "uil-fsz-24 lg:uil-fsz-36" }, title)) : (title))),
            children && renderText(children, isIconOutside)),
        children && react_2.jsx("div", null, renderCta(children, color))));
};
TextBlock.displayName = 'TextBlock';
exports.default = TextBlock;
//# sourceMappingURL=TextBlock.js.map