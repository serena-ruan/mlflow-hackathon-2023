"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsxRuntime classic /
/** @jsx jsx */
const react_1 = require("react");
const classnames_1 = __importDefault(require("classnames"));
const react_2 = require("@emotion/react");
const index_1 = require("../../index");
const SliderStories_css_1 = __importDefault(require("./SliderStories.css"));
const breakpoints = __importStar(require("../../constants/breakpoints"));
const BACKGROUND_COLORS = {
    'light-grey': 'uil-bgc-grey-100',
    transparent: 'uil-bgc-transparent',
    white: 'uil-bgc-white',
};
const StoryWrapper = ({ item, reverse }) => {
    if (!item)
        return null;
    const CustomTag = item.type;
    if (CustomTag.displayName && CustomTag.displayName === 'Story') {
        return (react_2.jsx(CustomTag, Object.assign({}, item.props, { reverse: reverse, className: classnames_1.default('uil-slider-story-item uil-bdbw-0 uil-bdbs-solid uil-pv-48 md:uil-pv-120 md:uil-h-100vh', item.props.className), imageProps: {
                ...item.props.imageProps,
                className: classnames_1.default('uil-d-block md:uil-d-none', item.props.imageProps.className),
            }, css: SliderStories_css_1.default.opacityTransition })));
    }
    else {
        throw new Error("You can only use 'Story' components.");
    }
};
const ImageWrapper = ({ item, index, posterBackground, ...other }) => {
    if (!item)
        return null;
    const { alt: imageAlt, css: imageCss, tag: imageTag, className: imageClassName, ...otherImageProps } = item.props.imageProps;
    const CustomTag = imageTag || 'img';
    return (react_2.jsx(CustomTag, Object.assign({}, other, otherImageProps, { className: classnames_1.default('uil-w-100p uil-h-100p uil-obf-contain uil-obp-center uil-pos-absolute uil-mh-auto md:uil-op-0', BACKGROUND_COLORS[posterBackground], imageClassName), css: [SliderStories_css_1.default.opacityTransition, imageCss], src: item.props.image, alt: imageAlt, "data-uil-slider-stories": `image-index-${index}` })));
};
const SliderStories = ({ children, posterBackground = 'white', reverse = false, withLargerText = false, ...other }) => {
    const sliderContainerRef = react_1.useRef(null);
    const sliderRef = react_1.useRef(null);
    const sliderStoriesRef = react_1.useRef(null);
    const sliderPosterRef = react_1.useRef(null);
    const sliderPosterImagesContainerRef = react_1.useRef(null);
    const sliderTitleRef = react_1.useRef(null);
    const isInActionZone = (rect) => {
        return rect.top < 300 && rect.bottom > 200;
    };
    const watchChild = (child, index, sliderPoster) => {
        const childBoundingClientRect = child.getBoundingClientRect();
        const childPoster = sliderPoster.querySelector(`[data-uil-slider-stories="image-index-${index}"]`);
        if (isInActionZone(childBoundingClientRect)) {
            child.classList.add('md:uil-op-100p');
            child.classList.remove('md:uil-op-25p');
        }
        else {
            child.classList.remove('md:uil-op-100p');
            child.classList.add('md:uil-op-25p');
        }
        if (childPoster) {
            if (childBoundingClientRect.top < -300) {
                childPoster.classList.remove('md:uil-op-100p');
                childPoster.classList.add('md:uil-op-0');
            }
            else {
                childPoster.classList.remove('md:uil-op-0');
                childPoster.classList.add('md:uil-op-100p');
            }
        }
    };
    const resizePoster = (container) => {
        return `${container.width / 2}px`;
    };
    const placePoster = (sliderElements) => {
        const sliderContainerBoundingClientRect = sliderElements.sliderContainer.getBoundingClientRect();
        if (isInActionZone(sliderContainerBoundingClientRect)) {
            sliderElements.sliderPosterImagesContainer.classList.remove('uil-op-0');
            sliderElements.sliderPosterImagesContainer.classList.add('uil-op-100p');
        }
        else {
            sliderElements.sliderPosterImagesContainer.classList.add('uil-op-0');
            sliderElements.sliderPosterImagesContainer.classList.remove('uil-op-100p');
        }
        sliderElements.sliderPoster.style.width = resizePoster(sliderContainerBoundingClientRect);
        if (sliderElements.sliderTitle
            ? sliderElements.sliderPoster.getBoundingClientRect().top <= 0 &&
                sliderElements.sliderPoster.getBoundingClientRect().bottom <=
                    window.innerHeight
            : sliderContainerBoundingClientRect.top <= 0) {
            sliderElements.sliderPoster.classList.remove('uil-pos-absolute');
            sliderElements.sliderPoster.classList.add('uil-pos-fixed');
            if (reverse) {
                sliderElements.sliderPoster.style.left = `${sliderContainerBoundingClientRect.left +
                    sliderElements.sliderPoster.getBoundingClientRect().width}px`;
            }
            else {
                sliderElements.sliderPoster.style.left = `${sliderContainerBoundingClientRect.left}px`;
            }
        }
    };
    const onScroll = (reverse, sliderElements, sliderContainerBoundingClientRect) => {
        const currentSliderPoster = sliderElements.sliderPoster;
        sliderElements.sliderStoryItem.forEach((child, index) => {
            requestAnimationFrame(() => watchChild(child, index, sliderElements.sliderPoster));
        });
        placePoster(sliderElements);
        /** If the container reaches the top or the bottom of the page
         *  switch position from absolute/fixed.
         *
         *  Also fades the images in/out depending on the scroll position
         */
        if (sliderContainerBoundingClientRect.top >= 0) {
            if (currentSliderPoster.classList.contains('uil-pos-fixed') &&
                currentSliderPoster.classList.contains('uil-top-0')) {
                currentSliderPoster.classList.remove('uil-top-0');
                currentSliderPoster.classList.add('uil-bot-0');
            }
            if (currentSliderPoster.classList.contains('uil-pos-fixed') &&
                currentSliderPoster.classList.contains('uil-bot-0')) {
                currentSliderPoster.classList.remove('uil-bot-0');
                currentSliderPoster.classList.add('uil-top-0');
            }
            currentSliderPoster.classList.remove('uil-pos-fixed');
            currentSliderPoster.classList.add('uil-pos-absolute');
            // Fade out images if the container scrolled to the end
            if (reverse) {
                currentSliderPoster.style.left = `${sliderElements.sliderPoster.getBoundingClientRect().width}px`;
            }
            else {
                currentSliderPoster.style.left = 0;
            }
        }
        if (sliderContainerBoundingClientRect.bottom <= window.innerHeight) {
            currentSliderPoster.classList.remove('uil-pos-fixed');
            currentSliderPoster.classList.add('uil-pos-absolute');
            currentSliderPoster.classList.add('uil-bot-0');
            currentSliderPoster.classList.remove('uil-top-0');
            // Fade out images if the container scrolled to the end
            if (reverse) {
                currentSliderPoster.style.left = `${sliderElements.sliderPoster.getBoundingClientRect().width}px`;
            }
            else {
                currentSliderPoster.style.left = 0;
            }
        }
    };
    react_1.useEffect(() => {
        if (window.matchMedia &&
            window.matchMedia(`(min-width: ${breakpoints.MD})`).matches) {
            const sliderContainer = sliderContainerRef.current;
            const sliderPosterImagesContainer = sliderPosterImagesContainerRef.current;
            const sliderPoster = sliderPosterRef.current;
            const sliderTitle = sliderTitleRef.current;
            const sliderStories = sliderStoriesRef.current;
            const sliderStoryItem = sliderStories &&
                sliderStories.querySelectorAll('.uil-slider-story-item');
            const sliderElements = {
                sliderContainer,
                sliderPoster,
                sliderPosterImagesContainer,
                sliderStoryItem,
                sliderTitle,
            };
            const reqAnimOnEvent = () => {
                if (sliderContainer) {
                    requestAnimationFrame(() => onScroll(reverse, sliderElements, sliderContainer.getBoundingClientRect()));
                }
            };
            window.addEventListener('scroll', reqAnimOnEvent);
            window.addEventListener('resize', reqAnimOnEvent);
            if (sliderPoster && sliderContainer) {
                sliderPoster.style.width = resizePoster(sliderContainer.getBoundingClientRect());
            }
            return () => {
                window.removeEventListener('resize', reqAnimOnEvent);
                window.removeEventListener('scroll', reqAnimOnEvent);
            };
        }
        return () => { };
    }, []);
    return (react_2.jsx("div", Object.assign({}, other, { ref: sliderContainerRef }),
        react_2.jsx("div", { className: "uil-pos-relative", ref: sliderRef },
            react_2.jsx("div", { className: classnames_1.default('uil-pos-absolute uil-top-0 uil-h-100vh uil-w-50p uil-pv-16 uil-d-none md:uil-d-block uil-z-5', reverse ? 'uil-right-0' : 'uil-left-0', BACKGROUND_COLORS[posterBackground]), ref: sliderPosterRef },
                react_2.jsx("div", { ref: sliderPosterImagesContainerRef, css: SliderStories_css_1.default.opacityTransition, className: "uil-op-0 uil-pos-absolute uil-top-0 uil-bot-0 uil-right-0 uil-left-0 uil-w-100p uil-h-100p uil-m-auto" }, react_1.Children.map(children, (item, index) => (react_2.jsx(ImageWrapper, { item: item, index: index, posterBackground: posterBackground, style: {
                        zIndex: react_1.Children.count(children) - index,
                    } }))))),
            react_2.jsx("div", { ref: sliderStoriesRef }, react_1.Children.map(children, item => (react_2.jsx(index_1.ErrorBoundary, null,
                react_2.jsx(StoryWrapper, { item: item, reverse: reverse }))))))));
};
exports.default = SliderStories;
//# sourceMappingURL=SliderStories.js.map