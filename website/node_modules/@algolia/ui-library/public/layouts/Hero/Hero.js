"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsxRuntime classic /
/** @jsx jsx */
const react_1 = require("react");
const classnames_1 = __importDefault(require("classnames"));
const react_2 = require("@emotion/react");
const index_1 = require("../../index");
const Hero_css_1 = __importDefault(require("./Hero.css"));
const helpers_1 = require("../../helpers");
const VideoWrapper = ({ modalOpen, setModalOpen, poster, video, videoProps = {}, }) => {
    const CustomVideoTag = videoProps.tag || 'video';
    const { className: videoClassName, tag: videoTag, ...otherVideoProps } = videoProps;
    if (video && !poster) {
        throw new Error('poster parameter must be set when using video and videoInModal parameters.');
    }
    return (react_2.jsx(index_1.Modal, { theme: "dark", handleClose: () => setModalOpen(false), isActive: modalOpen, hasVideo: true }, modalOpen && (react_2.jsx(react_1.Fragment, null, helpers_1.isVideoEmbed(video) ? (react_2.jsx(index_1.EmbeddedVideo, Object.assign({ autoPlay: true, className: "uil-m-auto uil-w-70p md:uil-w-100p", url: video }, otherVideoProps))) : (react_2.jsx(CustomVideoTag, Object.assign({}, otherVideoProps, { autoPlay: true, className: classnames_1.default('uil-h-auto uil-m-auto uil-d-block uil-w-70p md:uil-w-100p', videoClassName), src: video })))))));
};
/** `Hero` component is considered as the main header of the page. It can contain a couple of `Buttons`, a background, a `Heading1`, a `Heading3` and an optional image. */
const Hero = ({ align, background, children, cta, videoInModal, image, imageProps = {}, label, labelProps = {}, padding = 'normal', poster, subtitle, subtitleProps = {}, title, titleProps = {}, video, videoProps = {}, ...other }) => {
    const [modalOpen, setModalOpen] = react_1.useState(false);
    const { className: imageClassName, css: imageCss, tag: imageTag, ...otherImageProps } = imageProps;
    const { className: videoClassName, css: videoCss, tag: videoTag, ...otherVideoProps } = videoProps;
    const { className: titleClassName, ...otherTitleProps } = titleProps;
    const { className: subtitleClassName, color: subtitleColor, ...otherSubtitleProps } = subtitleProps;
    const { className: labelClassName, color: labelColor, tag: labelTag, ...otherLabelProps } = labelProps;
    const { className: otherClassName, ...otherProps } = other;
    const CustomImageTag = imageTag || 'img';
    const CustomVideoTag = videoProps.tag || 'video';
    const leftAligned = align === 'left' || ((image || video) && align !== 'right');
    const rightAligned = align === 'right';
    return (react_2.jsx("header", Object.assign({}, otherProps, { className: classnames_1.default('uil-ph-16 uil-ta-center uil-pos-relative', leftAligned && 'md:uil-ta-left', rightAligned && 'md:uil-ta-right', padding === 'small'
            ? 'uil-pv-32 lg:uil-pv-48'
            : 'uil-pv-80 lg:uil-pv-120', otherClassName) }),
        helpers_1.isBrowser && video && videoInModal && (react_2.jsx(index_1.ErrorBoundary, null,
            react_2.jsx(VideoWrapper, { modalOpen: modalOpen, setModalOpen: setModalOpen, video: video, videoProps: videoProps, poster: poster }))),
        background && (react_2.jsx("div", { css: [Hero_css_1.default.background, Hero_css_1.default[background]], className: "uil-pos-absolute uil-bgp-center uil-left-0 uil-right-0 uil-d-none uil-m-auto md:uil-d-block" })),
        react_2.jsx("div", { className: "uil-pos-relative uil-z-1 uil-maw-500 uil-m-auto md:uil-maw-1440" },
            children,
            label && (react_2.jsx(index_1.LabelText, Object.assign({}, otherLabelProps, { big: true, className: classnames_1.default('uil-d-block uil-mt-0 uil-mb-8', labelClassName), color: labelColor || 'blue', tag: labelTag || 'span' }), label)),
            react_2.jsx(index_1.Heading1, Object.assign({}, otherTitleProps, { className: classnames_1.default('uil-m-0 uil-maw-35ch uil-mr-auto', video
                    ? 'md:uil-w-60p lg:uil-w-50p'
                    : 'uil-ml-auto md:uil-w-60p lg:uil-w-70p', leftAligned && 'md:uil-ml-0', rightAligned && 'md:uil-ml-auto md:uil-mr-0', titleClassName) }), title),
            subtitle && (react_2.jsx(index_1.Heading3, Object.assign({}, otherSubtitleProps, { className: classnames_1.default('uil-mt-8 uil-mb-0 uil-ml-auto uil-mr-auto uil-jc-center lg:uil-mt-20', leftAligned && 'md:uil-ml-0', rightAligned && 'md:uil-mr-0', (leftAligned || rightAligned) && 'md:uil-w-50p', subtitleClassName), color: subtitleColor }), subtitle)),
            cta && (react_2.jsx("div", { className: classnames_1.default('uil-mt-32 uil-mh-auto uil-d-flex uil-fxd-column uil-ai-center xs:uil-fxd-row xs:uil-jc-center lg:uil-mt-48', leftAligned && 'md:uil-jc-start', rightAligned && 'md:uil-jc-end') }, react_1.Children.map(cta, (item, index) => {
                const Tag = item.type;
                return Tag ? (react_2.jsx(Tag, Object.assign({}, item.props, { css: Tag.displayName &&
                        Tag.displayName === 'Button' &&
                        Hero_css_1.default.button, className: classnames_1.default(item.props.className, index !== 0 && 'uil-mt-16 xs:uil-mt-0 xs:uil-ml-24') }))) : (react_2.jsx("div", { className: classnames_1.default(index !== 0 && 'uil-mt-16 xs:uil-mt-0 xs:uil-ml-24') }, item));
            })))),
        image && (react_2.jsx("div", { className: "uil-d-none uil-pos-absolute uil-left-0 uil-top-0 uil-right-0 uil-bot-0 uil-ov-hidden md:uil-d-block" },
            react_2.jsx(CustomImageTag, Object.assign({}, otherImageProps, { css: [
                    leftAligned && Hero_css_1.default.imageRight,
                    rightAligned && Hero_css_1.default.imageLeft,
                    imageCss,
                ], className: classnames_1.default('uil-pos-absolute uil-mah-100p', imageClassName), src: image })))),
        video && (react_2.jsx("div", { css: Hero_css_1.default.videoTransform, className: classnames_1.default('uil-z-1 uil-mh-auto uil-mt-32 md:uil-mt-auto md:uil-pos-absolute md:uil-top-50p md:uil-d-flex md:uil-ai-center', videoInModal ? 'md:uil-w-100p uil-maw-500' : 'uil-maw-700', leftAligned
                ? 'md:uil-left-50p'
                : 'md:uil-left-0 md:uil-right-50p md:uil-mr-0') }, videoInModal ? (react_2.jsx("button", { className: "uil-h-100p uil-pos-relative uil-bd-none uil-app-none uil-bgc-transparent uil-cursor-pointer uil-bgs-contain uil-bgp-center uil-bgr-no-repeat uil-w-100p xs:uil-w-70p md:uil-h-60p md:uil-fl-right lg:uil-bgs-cover lg:uil-w-100p", css: [
                Hero_css_1.default.video,
                react_2.css `
                  background-image: url(${poster});
                `,
            ], "data-with-play-button": true, "aria-label": "Play video", onClick: () => setModalOpen(true) },
            react_2.jsx(index_1.PlayButton, { "aria-hidden": true, className: "uil-pos-absolute uil-pe-none uil-top-50p uil-left-50p", css: Hero_css_1.default.playButton, tag: "span" }))) : (react_2.jsx("div", { className: "uil-pos-relative uil-m-auto xs:uil-w-60p md:uil-w-70p md:uil-fl-right lg:uil-w-100p" },
            react_2.jsx(CustomVideoTag, Object.assign({ autoPlay: true, muted: true, loop: true }, otherVideoProps, { css: [videoCss, Hero_css_1.default.videoMaxHeight], className: classnames_1.default('uil-h-auto uil-m-auto uil-d-block uil-w-100p md:uil-w-70p lg:uil-w-80p', videoClassName), src: video }))))))));
};
exports.default = Hero;
//# sourceMappingURL=Hero.js.map