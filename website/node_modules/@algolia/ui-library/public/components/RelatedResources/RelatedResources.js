"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsxRuntime classic /
/** @jsx jsx */
const react_1 = require("react");
const classnames_1 = __importDefault(require("classnames"));
const react_2 = require("@emotion/react");
const index_1 = require("../../index");
const react_feather_1 = require("react-feather");
const RelatedResources_css_1 = __importDefault(require("./RelatedResources.css"));
const helpers_1 = require("../../helpers");
const buttonClass = 'uil-app-none uil-bdr-max uil-bgc-grey-800 uil-bdw-0 uil-color-white uil-d-inline-flex uil-ai-center uil-jc-center uil-w-30 uil-h-30 lg:uil-h-40 lg:uil-w-40';
/** `RelatedResources` is a media exposition component. It can display multiple cards. Each one with
 * a title, a description and an image. Clicking on a card redirects to a URL.
 *
 * `RelatedResources` is meant to be source agnostic. Meaning that no matter the source of the data, it will
 * properly display them.
 *
 * `RelatedResources` is primarly made to be used with GraphQL returned data
 */
const RelatedResources = ({ cardsPerPage, cardsProps = { tag: 'a' }, data, descriptionLines = 3, titleLines = 2, externalRoutes = [
    'dashboard',
    'doc',
    'ebook',
    'event',
    'lp',
    'pdfs',
    'study',
    'support',
    'thank-you',
    'users',
    'webinar',
], seeMore, ...other }) => {
    const [isAtStart, setIsAtStart] = react_1.useState(true);
    const [isAtEnd, setIsAtEnd] = react_1.useState(cardsPerPage >= data.length);
    const [start, setStart] = react_1.useState(0);
    const [end, setEnd] = react_1.useState(cardsPerPage);
    const [itemArray, setItemArray] = react_1.useState(data.slice(start, end));
    const setLastPage = () => {
        setIsAtEnd(true);
        setStart(data.length - cardsPerPage);
        setEnd(data.length);
        setItemArray(data.slice(data.length - cardsPerPage, data.length));
    };
    const setFirstPage = () => {
        setIsAtStart(true);
        setStart(0);
        setEnd(cardsPerPage);
        setItemArray(data.slice(0, cardsPerPage));
    };
    const setNewPage = (tmpStart, tmpEnd) => {
        setStart(tmpStart);
        setEnd(tmpEnd);
        setItemArray(data.slice(tmpStart, tmpEnd));
    };
    const next = () => {
        if (end < data.length) {
            setIsAtStart(false);
            const tmpStart = start + cardsPerPage;
            const tmpEnd = end + cardsPerPage;
            if (tmpEnd >= data.length)
                setLastPage();
            else
                setNewPage(tmpStart, tmpEnd);
        }
    };
    const prev = () => {
        if (start > 0) {
            setIsAtEnd(false);
            const tmpStart = start - cardsPerPage;
            const tmpEnd = end - cardsPerPage;
            if (tmpStart <= 0)
                setFirstPage();
            else
                setNewPage(tmpStart, tmpEnd);
        }
    };
    const clampStyles = (lines) => [
        RelatedResources_css_1.default.clamp,
        react_2.css `
      -webkit-line-clamp: ${lines};
      line-clamp: ${lines};
    `,
    ];
    return (react_2.jsx("div", Object.assign({}, other),
        react_2.jsx("div", { className: "uil-d-flex uil-jc-center uil-mb-12 lg:uil-mb-20 lg:uil-jc-end" },
            react_2.jsx("button", { "aria-label": "Previous page", className: classnames_1.default('uil-mr-8 lg:uil-mr-12', buttonClass, isAtStart ? 'uil-op-50p' : 'uil-cursor-pointer'), onClick: prev },
                react_2.jsx(react_feather_1.Play, { "aria-hidden": true, className: "uil-w-14 uil-h-14 uil-pos-relative", fill: "currentColor", css: react_2.css `
              left: -1px;
              transform: rotate(180deg);
            ` })),
            react_2.jsx("button", { "aria-label": "Next page", className: classnames_1.default(buttonClass, isAtEnd ? 'uil-op-50p' : 'uil-cursor-pointer'), onClick: next },
                react_2.jsx(react_feather_1.Play, { "aria-hidden": true, className: "uil-w-14 uil-h-14 uil-pos-relative", css: react_2.css `
              left: 1px;
            `, fill: "currentColor" }))),
        react_2.jsx(index_1.CardsGrid, { columnsPerRow: itemArray.length }, itemArray.map(node => {
            const textCta = node.type === 'videos' ? 'Watch video' : 'Read more';
            return (react_2.jsx(index_1.Card, { key: node.title, image: node.image, imageProps: {
                    alt: `illustration for: '${node.title}'"`,
                    loading: 'lazy',
                }, elevation: true, tag: cardsProps.tag, href: helpers_1.isInternalLink(node.url, externalRoutes) ? null : node.url, to: helpers_1.isInternalLink(node.url, externalRoutes) ? node.url : null, className: "uil-td-none uil-d-block" },
                react_2.jsx("div", { className: "uil-d-flex uil-fxd-column uil-jc-between uil-h-100p" },
                    node.description ? (react_2.jsx(index_1.TextBlock, { title: node.title, titleProps: {
                            className: 'uil-ov-hidden uil-to-ellipsis',
                            css: clampStyles(titleLines),
                        } },
                        react_2.jsx(index_1.Text, { tag: "div" },
                            react_2.jsx("p", { css: clampStyles(descriptionLines), className: "uil-m-0 uil-ov-hidden uil-to-ellipsis" }, node.description)))) : (react_2.jsx(index_1.Heading3, { className: "uil-ov-hidden uil-to-ellipsis uil-mv-0", css: clampStyles(titleLines) }, node.title)),
                    react_2.jsx("div", { className: "uil-js-end" },
                        node.author && (react_2.jsx("div", { className: "uil-d-flex uil-ai-center uil-mt-16" },
                            react_2.jsx("img", { src: node.author.avatar_url, alt: node.author.name, className: "uil-w-50 uil-h-50 uil-bdr-max uil-mr-16", loading: "lazy" }),
                            react_2.jsx("div", { className: "uil-fxg-1" },
                                react_2.jsx(index_1.Text, { className: "uil-m-0 uil-lh-big" }, node.author.name),
                                react_2.jsx(index_1.Text, { small: true, className: "uil-m-0 uil-fw-bold" }, node.author.job_title)))),
                        react_2.jsx(index_1.LightCta, { tag: "p", className: "uil-mt-16 uil-mb-0", withTail: true }, textCta)))));
        })),
        seeMore && (react_2.jsx("div", { className: "uil-ta-center uil-pt-24 lg:uil-pt-32" },
            react_2.jsx(index_1.Button, { href: seeMore, background: "white", color: "grey" }, "See more")))));
};
exports.default = RelatedResources;
//# sourceMappingURL=RelatedResources.js.map