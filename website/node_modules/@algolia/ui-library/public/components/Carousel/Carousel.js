"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsxRuntime classic /
/** @jsx jsx */
const classnames_1 = __importDefault(require("classnames"));
const react_1 = require("@emotion/react");
const react_2 = require("react");
const react_feather_1 = require("react-feather");
const utils_1 = require("./utils");
const Carousel_css_1 = __importDefault(require("./Carousel.css"));
const HEIGHT_CLASS = {
    default: 'uil-h-100p md:uil-h-300 lg:uil-h-400',
    wide: 'uil-h-100p md:uil-h-240',
};
const WIDTH_CLASS = {
    default: 'md:uil-w-50p',
    wide: 'md:uil-w-80p',
};
const Carousel = ({ auto, children, theme = 'light', timing = 10000, isWide, ...other }) => {
    const [interval, setIntervalFc] = react_2.useState();
    const numberOfChildren = react_2.Children.count(children);
    const [currentSlide, setCurrentSlide] = react_2.useState(0);
    const nextSlide = () => setCurrentSlide(oldSlide => oldSlide === numberOfChildren - 1 ? 0 : oldSlide + 1);
    const createInterval = () => {
        setIntervalFc(setInterval(() => {
            nextSlide();
        }, timing));
    };
    const resetInterval = () => {
        if (auto && interval) {
            clearInterval(interval);
            createInterval();
        }
    };
    const goToPreviousSlide = () => {
        setCurrentSlide(oldSlide => oldSlide === 0 ? numberOfChildren - 1 : oldSlide - 1);
        resetInterval();
    };
    const goToNextSlide = () => {
        nextSlide();
        resetInterval();
    };
    const getDotsBackgroundColor = (isSelected) => {
        if (theme === 'light') {
            if (isSelected) {
                return 'uil-bgc-grey-700';
            }
            return 'uil-bgc-grey-200';
        }
        if (isSelected) {
            return 'uil-bgc-nebula-500';
        }
        return 'uil-bgc-white';
    };
    react_2.useEffect(() => {
        if (auto) {
            createInterval();
        }
        return () => interval && clearInterval(interval);
    }, []);
    const classKey = isWide ? 'wide' : 'default';
    return (react_1.jsx("div", Object.assign({}, other),
        react_1.jsx("div", { className: classnames_1.default('uil-pos-relative lg:uil-maw-1440', HEIGHT_CLASS[classKey]) },
            react_2.Children.map(children, (item, index) => {
                const getStyleArray = utils_1.definePositionStyle({
                    currentSlide,
                    slideIndex: index,
                    slideLength: numberOfChildren,
                    isWide: Boolean(isWide),
                });
                const Tag = item.type || 'div';
                const isLastItem = index === react_2.Children.count(children) - 1;
                return (react_1.jsx("div", { key: index, css: [Carousel_css_1.default.slide, getStyleArray[1]], className: classnames_1.default('uil-m-auto md:uil-left-50p md:uil-pos-absolute md:uil-top-0', HEIGHT_CLASS[classKey], WIDTH_CLASS[classKey], getStyleArray[0], { 'uil-mb-12': !isLastItem }, { 'uil-pe-none': currentSlide !== index }) },
                    react_1.jsx("div", { className: "uil-d-none md:uil-pos-absolute md:uil-w-100p md:uil-h-100p md:uil-z-max" }),
                    react_1.jsx(Tag, Object.assign({}, item.props, { key: index, className: classnames_1.default('uil-h-100p uil-w-100p', item.props.className) }))));
            }),
            react_1.jsx("div", { className: classnames_1.default('uil-d-none md:uil-d-flex uil-jc-center uil-mt-24 uil-mh-auto md:uil-mh-0 md:uil-mt-0 md:uil-d-block md:uil-top-0 md:uil-left-0 md:uil-right-0 md:uil-left-50p md:uil-pos-absolute md:uil-pe-none md:uil-h-240 lg:uil-h-240', WIDTH_CLASS[classKey], HEIGHT_CLASS[classKey]), css: Carousel_css_1.default.middleSlide },
                react_1.jsx("button", { "aria-label": "Go to previous slide", css: Carousel_css_1.default.buttonLeft, className: classnames_1.default('uil-mr-4 uil-cursor-pointer uil-app-none uil-bdr-max uil-w-40 uil-h-40 uil-bxs-none uil-bd-none uil-d-flex uil-jc-center uil-ai-center md:uil-pos-absolute md:uil-top-50p md:uil-mr-0 md:uil-pe-auto', getDotsBackgroundColor(true)), onClick: goToPreviousSlide },
                    react_1.jsx(react_feather_1.ArrowLeft, { className: "uil-color-white uil-pos-relative uil-w-24 uil-h-24 uil-d-block" })),
                react_1.jsx("button", { "aria-label": "Go to next slide", css: Carousel_css_1.default.buttonRight, className: classnames_1.default('uil-ml-4 uil-cursor-pointer uil-app-none uil-bdr-max uil-w-40 uil-h-40 uil-bxs-none uil-bd-none uil-d-flex uil-jc-center uil-ai-center md:uil-pos-absolute md:uil-top-50p md:uil-ml-0 md:uil-pe-auto', getDotsBackgroundColor(true)), onClick: goToNextSlide },
                    react_1.jsx(react_feather_1.ArrowRight, { className: "uil-color-white uil-pos-relative uil-w-24 uil-h-24 uil-d-block" })))),
        react_1.jsx("ul", { className: "uil-d-none md:uil-m-0 md:uil-d-flex md:uil-lis-none md:uil-jc-center md:uil-pl-0 md:uil-pv-24", css: Carousel_css_1.default.dotsContainer }, react_2.Children.map(children, (_, index) => (react_1.jsx("li", { className: "md:uil-d-flex md:uil-ai-center md:uil-jc-center", key: index },
            react_1.jsx("button", { "aria-label": `Go to slide ${index + 1}`, className: classnames_1.default('uil-cursor-pointer uil-app-none uil-bdr-max uil-p-4 uil-mh-8 uil-bxs-none uil-bd-none', getDotsBackgroundColor(currentSlide === index)), onClick: () => setCurrentSlide(index) })))))));
};
Carousel.displayName = 'Carousel';
exports.default = Carousel;
//# sourceMappingURL=Carousel.js.map