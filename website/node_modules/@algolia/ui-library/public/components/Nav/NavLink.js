"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsxRuntime classic /
/** @jsx jsx */
const classnames_1 = __importDefault(require("classnames"));
const react_1 = require("@emotion/react");
const helpers_1 = require("../../helpers");
const NavLink = ({ children, className, externalRoutes = [], internalLinkTag, to, trackedEvents, trackEvent, withUrlPrefix, ...other }) => {
    const isInternal = internalLinkTag !== 'a' &&
        !withUrlPrefix &&
        helpers_1.isInternalLink(to, externalRoutes);
    const Tag = internalLinkTag;
    const Link = ({ tag, ...other }) => {
        const LinkTag = tag;
        const { onClick: otherOnClick, ...otherProps } = other; // If parent component passes its own onClick prop, destructure and call it in the LinkTag onClick
        return (react_1.jsx(LinkTag, Object.assign({}, otherProps, { className: classnames_1.default('uil-td-none', className), "data-uil-nav-internal-link": isInternal, onClick: (e) => {
                helpers_1.removeOverflowHiddenBody();
                if (trackedEvents) {
                    const innerText = e.target.innerText;
                    if (innerText) {
                        const title = trackedEvents[innerText.toLowerCase()];
                        if (trackEvent && title)
                            trackEvent(...title);
                    }
                }
                if (otherOnClick)
                    otherOnClick();
            } }), children));
    };
    const isUrlPrefixable = (url) => url.charAt(0) === '/';
    return isInternal ? (react_1.jsx(Link, Object.assign({}, other, { to: to, tag: Tag }))) : (react_1.jsx(Link, Object.assign({}, other, { href: `${withUrlPrefix && isUrlPrefixable(to) ? 'https://www.algolia.com' : ''}${to}`, tag: "a" })));
};
exports.default = NavLink;
//# sourceMappingURL=NavLink.js.map