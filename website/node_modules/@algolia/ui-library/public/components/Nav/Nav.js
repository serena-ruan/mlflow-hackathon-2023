"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsxRuntime classic /
/** @jsx jsx */
const react_1 = require("@emotion/react");
const react_2 = require("react");
const react_headroom_1 = __importDefault(require("react-headroom"));
const NavDesktop_1 = __importDefault(require("./NavDesktop"));
const NavLink_1 = __importDefault(require("./NavLink"));
const NavMobile_1 = __importDefault(require("./NavMobile"));
const SubNav_1 = __importDefault(require("./SubNav"));
const SecondaryNav_1 = __importDefault(require("./SecondaryNav"));
const HintAssets_1 = __importDefault(require("./HintAssets"));
const helpers_1 = require("../../helpers");
const routes = __importStar(require("../../constants/routes"));
/**
 *
 * `Nav` is the main navigation currently used on algolia.com.
 *
 * # Context
 *
 * It is designed to be framework-agnostic, and can be customized to define internal and external routes.
 *
 */
const Nav = ({ externalRoutes = [
    'blog',
    'dashboard',
    'doc',
    'ebook',
    'event',
    'lp',
    'pdfs',
    'study',
    'support',
    'thank-you',
    'users',
    'webinar',
], internalLinkTag = 'a', isLoggedIn = false, logo, secondaryNav, theme = 'light', trackedEvents, trackEvent, translucidSearch, withUrlPrefix = false, }) => {
    const [current, setCurrent] = react_2.useState('');
    const [mobileOpen, setMobileOpen] = react_2.useState(false);
    const [desktopSubNavLeftPosition, setDesktopSubNavLeftPosition] = react_2.useState(0);
    const [desktopSubNavTopPosition, setDesktopSubNavTopPosition] = react_2.useState(0);
    const [mobileNavTopPosition, setMobileNavTopPosition] = react_2.useState(0);
    const [hintOpen, setHintOpen] = react_2.useState(false);
    const [navPinned, setNavPinned] = react_2.useState(false);
    const [navShadow, setNavShadow] = react_2.useState(false);
    const [navBackground, setNavBackground] = react_2.useState(false);
    const secondaryRef = react_2.useRef(null);
    const Link = ({ children, to, ...linkOther }) => (react_1.jsx(NavLink_1.default, Object.assign({}, linkOther, { externalRoutes: externalRoutes, internalLinkTag: internalLinkTag, to: to, trackedEvents: trackedEvents, trackEvent: trackEvent, withUrlPrefix: withUrlPrefix }), children));
    react_2.useEffect(() => {
        setNavShadow(false);
        if (helpers_1.isBrowser) {
            if (!secondaryNav) {
                window.addEventListener('scroll', () => {
                    if (document.documentElement.scrollTop === 0 && !navPinned) {
                        setNavShadow(false);
                        setNavBackground(false);
                    }
                    else {
                        setNavShadow(true);
                        setNavBackground(true);
                    }
                });
            }
            const hideNavOnEscape = (e) => {
                if (e.key === 'Escape')
                    setCurrent('');
            };
            const hideNavonScroll = () => {
                setCurrent('');
            };
            const keydownEvent = (e) => hideNavOnEscape(e);
            const scrollEvent = () => hideNavonScroll();
            window.addEventListener('keydown', keydownEvent);
            window.addEventListener('scroll', scrollEvent);
            setNavBackground(Boolean(secondaryNav));
            return () => {
                window.removeEventListener('keydown', keydownEvent);
                window.removeEventListener('scroll', scrollEvent);
            };
        }
        return () => { };
    }, []);
    const toggleHintAsset = (event) => {
        event.preventDefault();
        setHintOpen(true);
    };
    return (react_1.jsx(react_2.Fragment, null,
        react_1.jsx(react_headroom_1.default, { onPin: () => {
                if (secondaryRef.current) {
                    secondaryRef.current.style.transform = `translateY(0)`;
                    secondaryRef.current.style.transition = `all 0s ease !important`;
                }
                setNavPinned(true);
            }, onUnpin: () => {
                if (secondaryRef.current) {
                    secondaryRef.current.style.transform = `translateY(${secondaryRef.current.getBoundingClientRect().height}px)`;
                }
                setNavPinned(false);
            }, className: "uil-z-5 uil-pos-relative uil-h-auto uil-ov-visible" },
            react_1.jsx(NavMobile_1.default, { internalLinkTag: internalLinkTag, mobileOpen: mobileOpen, Link: Link, setMobileOpen: setMobileOpen, setMobileNavTopPosition: setMobileNavTopPosition, onLogoContextMenu: toggleHintAsset, theme: theme, hasSecondaryNav: Boolean(secondaryNav) }),
            react_1.jsx(NavDesktop_1.default, { current: current, internalLinkTag: internalLinkTag, Link: Link, onLogoContextMenu: toggleHintAsset, theme: theme, setCurrent: setCurrent, isLoggedIn: isLoggedIn, setDesktopSubNavLeftPosition: setDesktopSubNavLeftPosition, setDesktopSubNavTopPosition: setDesktopSubNavTopPosition, pinned: navPinned, hasSecondaryNav: Boolean(secondaryNav), hasShadow: navShadow, hasBackground: navBackground, translucidSearch: translucidSearch, logo: logo, withUrlPrefix: withUrlPrefix }),
            secondaryNav && (react_1.jsx(SecondaryNav_1.default, { breadcrumb: secondaryNav.breadcrumb, internalLinkTag: internalLinkTag, links: secondaryNav.links, theme: theme, secondaryRef: secondaryRef }))),
        react_1.jsx(SubNav_1.default, { current: current, desktopSubNavLeftPosition: desktopSubNavLeftPosition, desktopSubNavTopPosition: desktopSubNavTopPosition, isLoggedIn: isLoggedIn, Link: Link, mobileOpen: mobileOpen, mobileNavTopPosition: mobileNavTopPosition, setCurrent: setCurrent, trackEvent: trackEvent, withUrlPrefix: true }),
        react_1.jsx(HintAssets_1.default, { onClick: () => setHintOpen(false), visible: hintOpen, buttonHref: `${routes.PRESS}?section=brand-guidelines` })));
};
exports.default = Nav;
//# sourceMappingURL=Nav.js.map