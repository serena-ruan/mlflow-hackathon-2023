"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const classnames_1 = __importDefault(require("classnames"));
const LabelText_1 = __importDefault(require("../LabelText"));
const helpers_1 = require("../../helpers");
/**
 * The component manage the input/label IDs and names itself, however, you can override it
 * by passing your desired ID to this DropdownItem component.
 */
const DropdownItem = ({ id, isRefined, label, onChange, name, value, ...other }) => {
    const uniqueId = new Date().getTime();
    const slug = other.index && helpers_1.slugify(`${uniqueId}-${other.index}-${label.toLowerCase()}`);
    return (react_1.default.createElement("li", Object.assign({}, other, { className: classnames_1.default('uil-bdbw-1 uil-bdbs-solid uil-bdc-grey-100 uil-bgc-white hover:uil-bgc-grey-100', isRefined && 'checked') }),
        react_1.default.createElement("label", { htmlFor: id || slug || label, title: label, className: "uil-d-flex uil-ai-center uil-w-100p uil-cursor-pointer" },
            react_1.default.createElement("input", { type: "checkbox", value: value, name: name || slug || label, id: id || slug || label, onChange: onChange, className: "uil-ml-8", checked: isRefined }),
            ' ',
            react_1.default.createElement(LabelText_1.default, { tag: "span", className: "uil-p-8 uil-d-inline-block uil-ov-hidden uil-ws-nowrap uil-to-ellipsis uil-w-100p uil-h-100p" }, label))));
};
exports.default = DropdownItem;
//# sourceMappingURL=DropdownItem.js.map