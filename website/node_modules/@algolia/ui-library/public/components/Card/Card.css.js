"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("@emotion/react");
const breakpoints = __importStar(require("../../constants/breakpoints"));
const colors = __importStar(require("../../constants/colors"));
exports.default = {
    root: react_1.css `
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
  `,
    light: react_1.css `
    background-image: linear-gradient(${colors.WHITE}, ${colors.GREY_100});
  `,
    dark: react_1.css `
    background-image: radial-gradient(
      circle at 50% 0,
      ${colors.GREY_700},
      ${colors.GREY_900}
    );
  `,
    blue: react_1.css `
    background-image: radial-gradient(
      circle at 50% 0,
      ${colors.NEBULA_500},
      ${colors.NEBULA_800}
    );
  `,
    green: react_1.css `
    background-image: radial-gradient(
      circle at 50% 0,
      ${colors.GREEN_700},
      ${colors.GREEN_900}
    );
  `,
    elevation: react_1.css `
    &:hover,
    &:focus {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px 0 rgba(37, 44, 97, 0.15),
        0 4px 18px 0 rgba(93, 100, 148, 0.2);
    }
  `,
    largeElevation: react_1.css `
    &:hover,
    &:focus {
      transform: translateY(-5px);
      box-shadow: 0 20px 60px 0 rgba(37, 44, 97, 0.15),
        0 8px 16px 0 rgba(93, 100, 148, 0.2);
    }
  `,
    badge: react_1.css `
    @media (min-width: ${breakpoints.SM}) {
      left: 50%;
      transform: translateX(-50%) translateY(-50%);
    }
  `,
};
//# sourceMappingURL=Card.css.js.map