/** @jsxRuntime classic /
/** @jsx jsx */
import { Children, useState } from 'react';
import cx from 'classnames';
import { jsx, css } from '@emotion/react';
import { Play } from 'react-feather';
import { ErrorBoundary } from '../../index';
import styles from './FeaturesCarousel.css';
const COLORS = {
    blue: 'uil-color-nebula-500',
    green: 'uil-color-green-700',
    grey: 'uil-color-grey-800',
    orange: 'uil-color-orange-600',
    pink: 'uil-color-pink-600',
    red: 'uil-color-red-600',
    white: 'uil-color-white',
};
const HOVER_COLORS = {
    blue: 'md:uil-bdc-nebula-500',
    green: 'md:uil-bdc-green-700',
    grey: 'md:uil-bdc-grey-800',
    orange: 'md:uil-bdc-orange-600',
    pink: 'md:uil-bdc-pink-600',
    red: 'md:uil-bdc-red-600',
    white: 'md:uil-bdc-white',
};
const CardWrapper = ({ currentMedia, hoverColor, item, index, reverse, setCurrentMedia, }) => {
    const { className: itemClassName, ...otherItemProps } = item.props;
    if (!item)
        return null;
    if (item.type && item.type.displayName === 'Card') {
        const CustomTag = item.type;
        return (jsx("li", { className: cx('uil-lis-none uil-pos-relative uil-bdr-4 md:uil-bdw-2 md:uil-bds-solid', currentMedia === index && hoverColor
                ? HOVER_COLORS[hoverColor]
                : 'md:uil-bdc-transparent', index > 0 && 'md:uil-mt-12'), tabIndex: 0, onFocus: () => setCurrentMedia(index), onTouchStart: () => setCurrentMedia(index), onMouseOver: () => setCurrentMedia(index), onClick: () => setCurrentMedia(index) },
            currentMedia === index && (jsx("div", { className: cx(`uil-d-none md:uil-pos-absolute md:uil-ai-center md:uil-h-100p md:uil-d-flex`, COLORS[hoverColor], reverse ? 'md:uil-right-0' : 'md:uil-left-0'), css: reverse ? styles.sideTriangleRight : styles.sideTriangleLeft },
                jsx(Play, { className: "uil-w-20 uil-h-20 uil-pos-relative", css: !reverse
                        ? css `
                      transform: rotate(180deg);
                      left: 9px;
                    `
                        : css `
                      left: -9px;
                    `, fill: "currentColor" }))),
            jsx(CustomTag, Object.assign({}, otherItemProps, { className: cx('uil-h-100p', itemClassName) }))));
    }
    throw new Error("You can only use 'Card' components.");
};
const MediaWrapper = ({ currentMedia, item, index, imageProps = item.props.imageProps || {}, videoProps = item.props.videoProps || {}, }) => {
    const { className: imageClassName, css: imageCSS, ...otherImageProps } = imageProps;
    const { className: videoClassName, css: videoCSS, ...otherVideoProps } = videoProps;
    if (!item)
        return null;
    if (item.type && item.type.displayName === 'Card') {
        if (!item.props.carouselImage && !item.props.carouselVideo) {
            throw new Error('Card must have carouselImage or carouselVideo prop.');
        }
        if (item.props.carouselImage) {
            const Tag = imageProps.tag || 'img';
            return (jsx(Tag, Object.assign({ src: item.props.carouselImage, alt: imageProps && imageProps.alt, className: cx('uil-m-auto uil-w-80p uil-h-auto uil-d-block md:uil-w-auto md:uil-mah-100p md:uil-maw-100p', currentMedia !== index && 'md:uil-d-none', imageProps && imageClassName) }, otherImageProps)));
        }
        if (item.props.carouselVideo)
            return (jsx("video", Object.assign({ autoPlay: true, loop: true, muted: true, src: item.props.carouselVideo, className: cx('uil-w-100p uil-h-auto uil-d-block md:uil-mah-100p md:uil-maw-100p md:uil-m-auto', currentMedia !== index && 'md:uil-d-none', videoClassName) }, otherVideoProps)));
    }
    throw new Error("You can only use 'Card' component.");
};
const FeaturesCarousel = ({ children, hoverColor = 'blue', reverse = false, ...other }) => {
    const [currentMedia, setCurrentMedia] = useState(0);
    return (jsx("div", Object.assign({}, other),
        jsx("div", { className: "uil-pos-relative" },
            jsx("div", { className: cx('uil-d-none md:uil-d-flex md:uil-pos-absolute md:uil-top-0 md:uil-h-100p md:uil-w-50p', reverse
                    ? 'md:uil-right-0 md:uil-pl-48'
                    : 'md:uil-left-0 md:uil-pr-48') }, Children.map(children, (item, index) => {
                return (jsx(ErrorBoundary, null,
                    jsx(MediaWrapper, { currentMedia: currentMedia, item: item, index: index })));
            })),
            jsx("ul", { className: cx('uil-pl-0 uil-mv-0 md:uil-w-50p', !reverse && 'md:uil-ml-50p') }, Children.map(children, (item, index) => {
                return (jsx(ErrorBoundary, null,
                    jsx("div", { className: cx('uil-mb-12 md:uil-d-none', index > 0 && 'uil-mt-80') },
                        jsx(MediaWrapper, { currentMedia: currentMedia, item: item, index: index })),
                    jsx(CardWrapper, { currentMedia: currentMedia, hoverColor: hoverColor, item: item, index: index, reverse: reverse, setCurrentMedia: setCurrentMedia })));
            })))));
};
export default FeaturesCarousel;
