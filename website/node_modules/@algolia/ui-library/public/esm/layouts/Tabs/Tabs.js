import React, { useState } from 'react';
import cx from 'classnames';
import { ErrorBoundary, LabelText } from '../../index';
const BACKGROUND_COLORS = {
    blue: 'uil-bdc-nebula-500',
    green: 'uil-bdc-green-700',
    orange: 'uil-bdc-orange-600',
    pink: 'uil-bdc-pink-600',
    red: 'uil-bdc-red-600',
};
const Tabs = ({ boxShadow = 'normal', contentProps = {}, data, defaultTab, tabProps = {}, ...other }) => {
    const [activeTab, setActiveTab] = useState(defaultTab || data[0].label);
    const { className: tabClassName, ...otherTabProps } = tabProps;
    return (React.createElement("div", Object.assign({}, other),
        React.createElement("ul", { className: "uil-d-flex uil-mv-0 uil-lis-none uil-pl-0 uil-ta-center" }, data.map(({ label, color }) => {
            const labelColor = color || 'blue';
            return (React.createElement("li", { key: label, className: "uil-lis-none uil-fxg-1" },
                React.createElement(LabelText, Object.assign({}, otherTabProps, { key: label, className: cx('uil-m-0 uil-p-12 uil-app-none uil-bdw-0 uil-cursor-pointer uil-bdts-solid uil-w-100p', activeTab.toLowerCase() === label.toLowerCase()
                        ? `uil-bgc-white ${boxShadow === 'normal' &&
                            'uil-bxs-default'} uil-bdtw-2 ${BACKGROUND_COLORS[labelColor]}`
                        : 'uil-bgc-transparent uil-bdbw-1 uil-bdbw-solid uil-bdc-transparent', tabClassName), tag: "button", disabled: label === activeTab, onClick: () => setActiveTab(label) }), label)));
        })),
        React.createElement("div", Object.assign({}, contentProps), data.map(({ label, children }) => {
            const active = label === activeTab;
            return (active &&
                children && React.createElement(ErrorBoundary, { key: label }, children));
        }))));
};
export default Tabs;
