/** @jsxRuntime classic /
/** @jsx jsx */
import cx from 'classnames';
import { jsx } from '@emotion/react';
import { ErrorBoundary, Heading2, LabelText } from '../../index';
import styles from './FeaturesRow.css';
const GRID_COLUMNS = {
    2: 'sm:uil-g-2',
    3: 'sm:uil-g-3',
    4: 'sm:uil-g-4',
};
const getPadding = (padding) => {
    switch (padding) {
        case 'small':
            return 'uil-pv-8';
        case 'normal':
            return 'uil-pv-24';
        case 'large':
            return 'uil-pv-48';
        default:
            return false;
    }
};
const FeaturesRowWrapper = ({ data, padding, ...other }) => {
    if (!data)
        return null;
    if (data.length > 1 && data.length < 5) {
        return (jsx("div", Object.assign({}, other, { className: cx('uil-d-flex uil-fxd-column uil-jc-center sm:uil-d-grid', GRID_COLUMNS[data.length]) }), data.map((item, index) => {
            const CustomIconTag = item.icon;
            return (jsx(ErrorBoundary, { key: item.title },
                jsx("div", { className: cx(`${index < data.length - 1
                        ? `${styles.fadedCard} uil-bdrs-solid uil-bdrw-1 uil-bdc-grey-200 uil-pos-relative`
                        : ''}`, getPadding(padding)) },
                    jsx("div", { className: "uil-d-flex uil-ai-center uil-jc-center uil-fxd-column" },
                        jsx("div", { className: "uil-pb-16 uil-pt-24 uil-ph-24 uil-bdr-max uil-bgc-grey-200" },
                            jsx(CustomIconTag, Object.assign({}, item.iconProps, { className: cx('uil-color-nebula-500 uil-w-50 uil-h-auto'), strokeWidth: 1 }))),
                        jsx(Heading2, { tag: "div", className: "uil-pt-48 uil-pb-0" }, item.title),
                        jsx(LabelText, null, item.subtitle)))));
        })));
    }
    throw new Error('The number of elements must be between: 2 and 4.');
};
/** `FeaturesRow` is used to highlight top features or characteristics of a product.
 *
 * Preferably used within a `Section`, below a `Heading2` and `Text`, to give more context to this component.
 */
const FeaturesRow = ({ background = 'light', data, padding = 'large', tag: CustomTag = 'div', ...other }) => {
    const { className: otherClassName, css: otherCss, ...otherProps } = other;
    return (jsx(CustomTag, Object.assign({}, otherProps, { css: [
            styles.root,
            background === 'light' ? styles.light : styles.dark,
            otherCss,
        ], className: cx('uil-bxs-default uil-bdr-2 uil-ff-poppins', otherClassName) }),
        jsx(FeaturesRowWrapper, { padding: padding, data: data })));
};
FeaturesRow.displayName = 'FeaturesRow';
export default FeaturesRow;
