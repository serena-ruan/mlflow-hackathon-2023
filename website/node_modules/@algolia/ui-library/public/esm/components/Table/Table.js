/** @jsxRuntime classic /
/** @jsx jsx */
import cx from 'classnames';
import { jsx } from '@emotion/react';
import styles from './Table.css';
const renderHead = (cells, withLabels, withStickyHead) => (jsx("thead", null,
    jsx("tr", null, cells.map((item, index) => (jsx("th", { className: cx('uil-p-8 uil-bdbs-solid uil-bdbw-1 uil-bdc-grey-200 uil-bgc-white', index === 0 && withLabels && 'uil-ta-left', withStickyHead && 'uil-pos-sticky uil-top-0'), key: item }, item))))));
const renderCells = (row, withLabels) => row.map((cell, index) => (jsx("td", { className: cx('uil-p-8 uil-fsz-14', index === 0 &&
        withLabels &&
        'uil-ta-left uil-bdrs-solid uil-bdrw-1 uil-bdc-grey-200'), key: cell }, cell)));
const renderBody = (data, withLabels) => (jsx("tbody", null, data.map((row, index) => (jsx("tr", { className: cx(index % 2 === 0 ? 'uil-bgc-white' : 'uil-bgc-grey-100'), key: `${row}-${index}` }, renderCells(row, withLabels))))));
const Table = ({ data, headCells, withLabels = false, withStickyHead = false, ...other }) => {
    const { className: otherClassName, css: otherCss, ...otherProps } = other;
    return (jsx("table", Object.assign({}, otherProps, { css: [styles.root, otherCss], className: cx('uil-ta-center uil-w-100p uil-bdw-1 uil-bds-solid uil-bdc-grey-200 uil-color-telluric uil-bdr-2 uil-ff-poppins', otherClassName) }),
        headCells && renderHead(headCells, withLabels, withStickyHead),
        data && renderBody(data, withLabels)));
};
export default Table;
