import { css } from '@emotion/react';
import * as breakpoints from '../../constants/breakpoints';
import * as colors from '../../constants/colors';
const generateStates = (color, shadow = true) => css `
    ${shadow &&
    css `
        box-shadow: 0px 2px 4px rgba(45, 35, 66, 0.4),
          0px 7px 13px -3px rgba(45, 35, 66, 0.3), inset 0px -3px 0px ${color};
      `}
    &:hover {
      box-shadow: 0px 4px 8px rgba(45, 35, 66, 0.4),
        0px 7px 13px -3px rgba(45, 35, 66, 0.3), inset 0px -3px 0px ${color};
      transform: translateY(-2px);
    }
    &:focus {
      box-shadow: inset 0 0 0 1.5px ${color}, 0px 2px 4px rgba(45, 35, 66, 0.4),
        0px 7px 13px -3px rgba(45, 35, 66, 0.3), inset 0px -3px 0px ${color};
    }
    &:active {
      box-shadow: inset 0px 3px 7px ${color};
      transform: translateY(2px);
    }
  `;
export default {
    root: css `
    height: 42px;
    transition: box-shadow 0.15s ease, transform 0.15s ease;
    will-change: box-shadow, transform;

    @media (min-width: ${breakpoints.LG}) {
      height: 48px;
    }
  `,
    text: css `
    top: -2px;
  `,
    disabled: css `
    transform: none !important;
  `,
    blue: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.CYAN_400} 0%,
      ${colors.NEBULA_500} 100%
    );
    box-shadow: 0px 2px 4px rgba(45, 35, 66, 0.4),
      0px 7px 13px -3px rgba(45, 35, 66, 0.3),
      inset 0px -3px 0px rgba(58, 65, 111, 0.5);
    ${generateStates(colors.NEBULA_600, false)}
  `,
    pink: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.PINK_300} 0%,
      ${colors.PINK_600} 100%
    );
    ${generateStates(colors.PINK_700)}
  `,
    white: css `
    background: ${colors.GREY_050};
    ${generateStates(colors.GREY_200)}
  `,
    orange: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.ORANGE_500} 0%,
      ${colors.ORANGE_700} 100%
    );
    ${generateStates(colors.ORANGE_800)}
  `,
    green: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.GREEN_500} 0%,
      ${colors.GREEN_700} 100%
    );
    ${generateStates(colors.GREEN_800)}
  `,
    purple: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.PINK_200} 0%,
      ${colors.COLOR_ANSWER} 100%
    );
    ${generateStates('rgb(0 0 0 / 20%)')}
  `,
    red: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.ORANGE_400} 0%,
      ${colors.COLOR_RECOMMEND} 100%
    );
    ${generateStates('rgb(0 0 0 / 20%)')}
  `,
    dark: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.GREY_500} 0%,
      ${colors.GREY_700} 100%
    );
    ${generateStates(colors.GREY_900)}
  `,
    answers: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.PINK_200} 0%,
      ${colors.COLOR_ANSWER} 100%
    );
    ${generateStates('rgba(54, 57, 90, 0.2)')}
  `,
    search: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.CYAN_400} 0%,
      ${colors.NEBULA_500} 100%
    );
    ${generateStates('rgba(54, 57, 90, 0.2)')}
  `,
    recommend: css `
    background: radial-gradient(
      100% 100% at 100% 0%,
      ${colors.ORANGE_400} 0%,
      ${colors.COLOR_RECOMMEND} 100%
    );
    ${generateStates('rgba(54, 57, 90, 0.2)')}
  `,
    round: css `
    width: 42px;
    @media (min-width: ${breakpoints.LG}) {
      width: 48px;
    }
  `,
    shine: css `
    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.4);
    &::before {
      content: '';
      position: absolute;
      z-index: 1;
      left: 0;
      top: 0;
      width: var(--size);
      height: var(--size);
      background: radial-gradient(
        circle closest-side,
        var(--shineColor),
        transparent
      );
      transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y)));
      transition: height 0.2s ease;
      will-change: width, height, transform;
    }
  `,
    shineIcon: css `
    filter: drop-shadow(0 1px 0 rgba(0, 0, 0, 0.4));
  `,
};
