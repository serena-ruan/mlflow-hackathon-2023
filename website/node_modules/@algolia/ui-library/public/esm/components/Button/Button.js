/** @jsxRuntime classic /
/** @jsx jsx */
import { useState } from 'react';
import cx from 'classnames';
import { jsx, css } from '@emotion/react';
import styles from './Button.css';
const COLORS = {
    grey: 'uil-color-grey-800',
    white: 'uil-color-white',
};
const generateGhostStates = (color) => {
    return `
  &:hover {
    background: ${color};
    transition: background .3s;
  }
  &:focus {
    background: ${color};
    transition: background .3s;
  }
  `;
};
const getGhostColor = (background) => {
    const defaultStyles = 'uil-bgc-transparent uil-bdw-1 uil-bds-solid';
    let color = 'uil-color-white uil-bdc-white';
    if (background === 'blue') {
        color = 'uil-color-nebula-500 uil-bdc-nebula-500';
    }
    if (background === 'dark') {
        color = 'uil-color-grey-900 uil-bdc-grey-900';
    }
    return defaultStyles + ' ' + color;
};
const renderIcon = (background, big, className, icon, iconProps, primary, shine) => {
    const CustomIconTag = icon;
    const { className: iconClassName, css: iconCss, ...otherIconProps } = iconProps;
    return (jsx(CustomIconTag, Object.assign({}, otherIconProps, { className: cx('uil-pos-relative uil-z-2 uil-fxs-0 uil-pe-none', big
            ? 'uil-w-18 uil-h-18 lg:uil-w-24 lg:uil-h-24'
            : 'uil-w-14 uil-h-14 lg:uil-w-18 lg:uil-h-18', className, iconClassName), css: [
            shine && (background !== 'white' || primary) && styles.shineIcon,
            iconCss,
        ] })));
};
/**
 * They are typically placed throughout the UI, in places like:

  - Forms
  - <a href="/docs/interaction-modal--basic">`Modal`</a>
  - <a href="/docs/misc-card--basic">`Card`</a>
  - <a href="/docs/layouts-section--basic">`Section`</a>
  - <a href="/docs/layouts-hero--basic">`Hero`</a>
 */
const Button = ({ background = 'white', children, color = 'grey', disabled, fontSize = 'normal', ghost, icon, iconPosition = 'after', iconProps = {}, padding = 'normal', primary = false, round, shine = true, shineColor = 'rgba(255, 255, 255, 0.2)', tag = 'button', ...other }) => {
    const CustomTag = other.href ? 'a' : tag;
    const { className: otherClassName, css: otherCss, style: otherStyle, ...otherProps } = other;
    const [x, setX] = useState(0);
    const [y, setY] = useState(0);
    const [size, setSize] = useState(0);
    const renderIconLeftOrRight = (className) => icon &&
        renderIcon(background, fontSize === 'big', cx(children && className), icon, iconProps, primary, shine);
    const getPadding = () => {
        if (ghost) {
            return 'uil-ph-16 uil-pv-16 sm:uil-ph-32';
        }
        if (round) {
            return 'uil-ph-0';
        }
        if (padding === 'small') {
            return 'uil-ph-16';
        }
        return 'uil-ph-24 lg:uil-ph-32';
    };
    const getGhostStyles = (background) => {
        if (!ghost)
            return;
        switch (background) {
            case 'blue':
                return css `
          ${!disabled ? generateGhostStates('rgba(84, 104, 255, 0.2)') : ''}
        `;
            case 'dark':
                return css `
          ${!disabled ? generateGhostStates('rgba(33, 36, 61, 0.2)') : ''}
        `;
            default:
                return css `
          ${!disabled ? generateGhostStates('rgba(255, 255, 255, 0.3)') : ''};
        `;
        }
    };
    return (jsx(CustomTag, Object.assign({}, otherProps, { onMouseMove: (event) => {
            const target = event.target;
            setX(event.clientX - target.getBoundingClientRect().left);
            setY(event.clientY - target.getBoundingClientRect().top);
        }, onMouseEnter: () => setSize(round ? 50 : 250), onMouseLeave: () => setSize(0), css: [
            styles.root,
            !ghost && styles[primary ? 'blue' : background],
            ghost && getGhostStyles(background),
            round && styles.round,
            disabled && styles.disabled,
            shine && (background !== 'white' || primary) && styles.shine,
            otherCss,
        ], style: {
            '--x': `${x}px`,
            '--y': `${y}px`,
            '--shineColor': shineColor,
            '--size': `${size}px`,
            ...otherStyle,
        }, className: cx('uil-app-none uil-bdw-0 uil-d-inline-flex uil-ai-center uil-jc-center uil-cursor-pointer uil-ff-jetbrains uil-td-none hover:uil-td-none', !ghost && (primary ? COLORS.white : COLORS[color]), getPadding(), ghost && getGhostColor(background), round ? 'uil-bdr-max' : 'uil-bdr-4', shine && 'uil-pos-relative uil-ov-hidden', disabled && 'uil-op-40p uil-cursor-not-allowed', otherClassName) }),
        icon && iconPosition === 'before' && renderIconLeftOrRight('uil-mr-8'),
        children && (jsx("span", { className: cx('uil-pe-none uil-pos-relative uil-z-2', fontSize === 'big'
                ? 'uil-fsz-18 lg:uil-fsz-24'
                : 'uil-fsz-14 lg:uil-fsz-18', disabled && 'uil-us-none'), css: styles.text }, children)),
        icon && iconPosition === 'after' && renderIconLeftOrRight('uil-ml-8')));
};
Button.displayName = 'Button';
export default Button;
