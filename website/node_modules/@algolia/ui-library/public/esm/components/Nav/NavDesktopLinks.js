/** @jsxRuntime classic /
/** @jsx jsx */
import { useEffect, useRef } from 'react';
import cx from 'classnames';
import { jsx } from '@emotion/react';
import NavDesktopLink from './NavDesktopLink';
import links from './Nav.data';
import subNavData from './SubNav.data';
import styles from './Nav.css';
import { isBrowser } from '../../helpers';
const isCurrentlyInFolder = (title) => {
    if (!isBrowser)
        return false;
    const folder = subNavData.find(item => item.title === title);
    if (!folder)
        return false;
    const inLinks = folder.links.find(item => item.url === window.location.pathname && !item.dismissHover);
    if (inLinks)
        return true;
    if (folder.sidebar) {
        return folder.sidebar.find(item => item.url === window.location.pathname && !item.dismissHover);
    }
};
const NavDesktopLinks = ({ current, Link, setCurrent, setDesktopSubNavLeftPosition, setDesktopSubNavTopPosition, theme, }) => {
    const ref = useRef(null);
    useEffect(() => {
        if (isBrowser) {
            const events = ['click', 'load', 'resize', 'scroll'];
            const updateScrollPosition = () => setTimeout(function () {
                if (ref.current) {
                    setDesktopSubNavTopPosition(ref.current.getBoundingClientRect().top +
                        ref.current.getBoundingClientRect().height);
                }
            }, 250);
            updateScrollPosition();
            events.map(event => window.addEventListener(event, () => updateScrollPosition()));
            return () => {
                events.map(event => window.removeEventListener(event, () => updateScrollPosition()));
            };
        }
        return () => { };
    }, []);
    return (jsx("div", { ref: ref, className: "uil-d-none md:uil-fxg-1 md:uil-pos-sticky md:uil-z-5 md:uil-top-0 md:uil-d-block", "data-uil-nav-desktop-links": true },
        jsx("div", { className: "uil-pos-relative lg:uil-ph-20" },
            jsx("div", { className: "uil-d-flex uil-ai-center uil-jc-between uil-maw-1440 uil-m-auto" },
                jsx("ul", { className: "uil-d-flex uil-m-0 uil-p-0 uil-lis-none" }, links.map((link, index) => (jsx("li", { className: cx(index > 0 && 'uil-ml-8 lg:uil-ml-16', 'uil-pos-relative'), key: link.title, css: styles.desktopNavLinkBefore(current === link.title || isCurrentlyInFolder(link.title), theme), "data-title": link.title },
                    jsx(NavDesktopLink, { onFocus: (e) => {
                            setCurrent(link.title);
                            if (e.target)
                                setDesktopSubNavLeftPosition(e.target.getBoundingClientRect().left);
                        }, onMouseExit: () => setCurrent(''), onMouseEnter: (e) => {
                            setCurrent(link.title);
                            if (e.target)
                                setDesktopSubNavLeftPosition(e.target.getBoundingClientRect().left);
                        }, isCurrent: current === link.title || isCurrentlyInFolder(link.title), tag: Link, theme: theme, link: link })))))))));
};
export default NavDesktopLinks;
