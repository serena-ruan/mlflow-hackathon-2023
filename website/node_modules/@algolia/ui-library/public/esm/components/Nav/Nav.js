/** @jsxRuntime classic /
/** @jsx jsx */
import { jsx } from '@emotion/react';
import { useRef, useState, useEffect, Fragment, } from 'react';
import Headroom from 'react-headroom';
import NavDesktop from './NavDesktop';
import NavLink from './NavLink';
import NavMobile from './NavMobile';
import SubNav from './SubNav';
import SecondaryNav from './SecondaryNav';
import HintAssets from './HintAssets';
import { isBrowser } from '../../helpers';
import * as routes from '../../constants/routes';
/**
 *
 * `Nav` is the main navigation currently used on algolia.com.
 *
 * # Context
 *
 * It is designed to be framework-agnostic, and can be customized to define internal and external routes.
 *
 */
const Nav = ({ externalRoutes = [
    'blog',
    'dashboard',
    'doc',
    'ebook',
    'event',
    'lp',
    'pdfs',
    'study',
    'support',
    'thank-you',
    'users',
    'webinar',
], internalLinkTag = 'a', isLoggedIn = false, logo, secondaryNav, theme = 'light', trackedEvents, trackEvent, translucidSearch, withUrlPrefix = false, }) => {
    const [current, setCurrent] = useState('');
    const [mobileOpen, setMobileOpen] = useState(false);
    const [desktopSubNavLeftPosition, setDesktopSubNavLeftPosition] = useState(0);
    const [desktopSubNavTopPosition, setDesktopSubNavTopPosition] = useState(0);
    const [mobileNavTopPosition, setMobileNavTopPosition] = useState(0);
    const [hintOpen, setHintOpen] = useState(false);
    const [navPinned, setNavPinned] = useState(false);
    const [navShadow, setNavShadow] = useState(false);
    const [navBackground, setNavBackground] = useState(false);
    const secondaryRef = useRef(null);
    const Link = ({ children, to, ...linkOther }) => (jsx(NavLink, Object.assign({}, linkOther, { externalRoutes: externalRoutes, internalLinkTag: internalLinkTag, to: to, trackedEvents: trackedEvents, trackEvent: trackEvent, withUrlPrefix: withUrlPrefix }), children));
    useEffect(() => {
        setNavShadow(false);
        if (isBrowser) {
            if (!secondaryNav) {
                window.addEventListener('scroll', () => {
                    if (document.documentElement.scrollTop === 0 && !navPinned) {
                        setNavShadow(false);
                        setNavBackground(false);
                    }
                    else {
                        setNavShadow(true);
                        setNavBackground(true);
                    }
                });
            }
            const hideNavOnEscape = (e) => {
                if (e.key === 'Escape')
                    setCurrent('');
            };
            const hideNavonScroll = () => {
                setCurrent('');
            };
            const keydownEvent = (e) => hideNavOnEscape(e);
            const scrollEvent = () => hideNavonScroll();
            window.addEventListener('keydown', keydownEvent);
            window.addEventListener('scroll', scrollEvent);
            setNavBackground(Boolean(secondaryNav));
            return () => {
                window.removeEventListener('keydown', keydownEvent);
                window.removeEventListener('scroll', scrollEvent);
            };
        }
        return () => { };
    }, []);
    const toggleHintAsset = (event) => {
        event.preventDefault();
        setHintOpen(true);
    };
    return (jsx(Fragment, null,
        jsx(Headroom, { onPin: () => {
                if (secondaryRef.current) {
                    secondaryRef.current.style.transform = `translateY(0)`;
                    secondaryRef.current.style.transition = `all 0s ease !important`;
                }
                setNavPinned(true);
            }, onUnpin: () => {
                if (secondaryRef.current) {
                    secondaryRef.current.style.transform = `translateY(${secondaryRef.current.getBoundingClientRect().height}px)`;
                }
                setNavPinned(false);
            }, className: "uil-z-5 uil-pos-relative uil-h-auto uil-ov-visible" },
            jsx(NavMobile, { internalLinkTag: internalLinkTag, mobileOpen: mobileOpen, Link: Link, setMobileOpen: setMobileOpen, setMobileNavTopPosition: setMobileNavTopPosition, onLogoContextMenu: toggleHintAsset, theme: theme, hasSecondaryNav: Boolean(secondaryNav) }),
            jsx(NavDesktop, { current: current, internalLinkTag: internalLinkTag, Link: Link, onLogoContextMenu: toggleHintAsset, theme: theme, setCurrent: setCurrent, isLoggedIn: isLoggedIn, setDesktopSubNavLeftPosition: setDesktopSubNavLeftPosition, setDesktopSubNavTopPosition: setDesktopSubNavTopPosition, pinned: navPinned, hasSecondaryNav: Boolean(secondaryNav), hasShadow: navShadow, hasBackground: navBackground, translucidSearch: translucidSearch, logo: logo, withUrlPrefix: withUrlPrefix }),
            secondaryNav && (jsx(SecondaryNav, { breadcrumb: secondaryNav.breadcrumb, internalLinkTag: internalLinkTag, links: secondaryNav.links, theme: theme, secondaryRef: secondaryRef }))),
        jsx(SubNav, { current: current, desktopSubNavLeftPosition: desktopSubNavLeftPosition, desktopSubNavTopPosition: desktopSubNavTopPosition, isLoggedIn: isLoggedIn, Link: Link, mobileOpen: mobileOpen, mobileNavTopPosition: mobileNavTopPosition, setCurrent: setCurrent, trackEvent: trackEvent, withUrlPrefix: true }),
        jsx(HintAssets, { onClick: () => setHintOpen(false), visible: hintOpen, buttonHref: `${routes.PRESS}?section=brand-guidelines` })));
};
export default Nav;
