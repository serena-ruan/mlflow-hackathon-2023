/** @jsxRuntime classic /
/** @jsx jsx */
import { Children } from 'react';
import { jsx } from '@emotion/react';
import cx from 'classnames';
import { ErrorBoundary, Text } from '../../index';
import styles from './List.css';
const ICON_COLORS = {
    blue: 'uil-color-nebula-500',
    white: 'uil-color-white',
};
const TagWrapper = ({ item, icon, color, small, iconProps = {}, }) => {
    if (!item)
        return null;
    const Tag = item.type || 'li';
    const Icon = icon;
    const { className: iconClassName, color: iconColor = 'blue', css: iconCss, ...otherIconProps } = iconProps;
    if (Tag === 'li') {
        return (jsx(Tag, Object.assign({}, item.props, { className: cx('uil-d-flex', item.props.className) }),
            icon && (jsx(Icon, Object.assign({}, otherIconProps, { "aria-hidden": true, className: cx('uil-pos-relative uil-w-16 uil-h-16 uil-fxs-0 uil-mr-8 lg:uil-w-20 lg:uil-h-20', iconColor && ICON_COLORS[iconColor], iconClassName), css: [styles.icon, iconCss] }))),
            jsx(Text, { className: "uil-m-0", color: color, small: small }, item.props.children)));
    }
    else {
        throw new Error("You can only use 'li' element.");
    }
};
/**
 * `List` is a component that aims to bring a basic design to lists
 *
 * Use `List` when you need to generate a list with or without icons before the items
 */
const List = ({ children, color, iconProps, icon, ...other }) => (jsx("div", Object.assign({}, other),
    jsx("ul", { className: cx('uil-m-0 uil-p-0 uil-lis-none'), role: "list" }, Children.map(children, (item, index) => (jsx(ErrorBoundary, null,
        jsx(TagWrapper, { key: index, item: item, icon: icon, color: color, iconProps: iconProps })))))));
export default List;
