/** @jsxRuntime classic /
/** @jsx jsx */
import cx from 'classnames';
import { jsx } from '@emotion/react';
import { ErrorBoundary } from '../../index';
import styles from './EmbeddedVideo.css';
import { isVideoEmbed } from '../../helpers';
const VideoWrapper = ({ autoPlay, iframeProps = {}, link, url, ...other }) => {
    const { className: iframeClassName, ...otherIframeProps } = iframeProps;
    const { className: otherClassName, ...otherProps } = other;
    let videoUrl = url || link;
    const isEmbed = isVideoEmbed(videoUrl);
    let style = null;
    if (isEmbed) {
        style = styles[isEmbed];
        if (autoPlay) {
            if (videoUrl.indexOf('?') > -1) {
                const splitUrl = videoUrl.split('?');
                /** Split is necessary. Otherwise, it will return the whole URL, url-encoded, with .toString(). */
                const currentUrlParams = new URLSearchParams(splitUrl[1]);
                /** Even if autoplay is set, this will force its value to 1. */
                currentUrlParams.set('autoplay', '1');
                /** As we split at the '?' position, we need to add back '?' right before the parameters. */
                const currentUrlParamsStr = `?${currentUrlParams.toString()}`;
                videoUrl = splitUrl[0] + currentUrlParamsStr;
            }
            else {
                videoUrl += '?autoplay=1';
            }
        }
    }
    if (isEmbed) {
        return (jsx("div", Object.assign({}, otherProps, { className: cx('uil-w-100p', otherClassName) }),
            jsx("div", { css: style, className: "uil-bgc-grey-900 uil-bxs-default uil-bdr-2 uil-pos-relative uil-h-0 uil-ov-hidden uil-pt-24 uil-w-100p" },
                jsx("iframe", Object.assign({}, otherIframeProps, { className: cx('uil-bd-none uil-pos-absolute uil-left-0 uil-top-0 uil-w-100p uil-h-100p', iframeClassName), src: videoUrl })))));
    }
    else {
        throw new Error('Wrong video source, you can only use embeddable videos url from: Youtube, Vimeo or Vidyard');
    }
};
const EmbeddedVideo = ({ autoPlay, iframeProps = {}, link, url, ...other }) => {
    return (jsx(ErrorBoundary, null,
        jsx(VideoWrapper, Object.assign({}, other, { autoPlay: autoPlay, iframeProps: iframeProps, link: link, url: url }))));
};
export default EmbeddedVideo;
