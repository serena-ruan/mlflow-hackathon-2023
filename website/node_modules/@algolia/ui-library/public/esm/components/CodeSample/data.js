import { BackLanguage, FrontLanguage } from './types';
export const back = {
    [BackLanguage.Ruby]: {
        name: 'Ruby',
        language: 'ruby',
        iconName: 'ruby.svg',
        link: 'https://github.com/algolia/algoliasearch-client-ruby',
        sample: `my_index = client.init_index('contacts')
my_index.save_object({
  firstname: "Jimmie",
  lastname: "Barninger",
  company: "California Paint"
})
`,
        code_query: `p my_index.search('jimmie b')
`,
    },
    [BackLanguage.Rails]: {
        name: 'Rails',
        language: 'ruby',
        iconName: 'rails.svg',
        link: 'https://github.com/algolia/algoliasearch-rails',
        sample: `class Contact < ActiveRecord::Base
  include AlgoliaSearch
  algoliasearch do
    attribute :firstname, :lastname, :company
  end
end
`,
        code_query: `p Contact.search("jimmie b")
`,
    },
    [BackLanguage.Python]: {
        name: 'Python',
        language: 'python',
        iconName: 'python.svg',
        link: 'https://github.com/algolia/algoliasearch-client-python',
        sample: `myIndex = apiClient.init_index("contacts")
myIndex.save_object({
  "firstname": "Jimmie",
  "lastname": "Barninger",
  "company": "California Paint"
})
`,
        code_query: `print myIndex.search("jimmie b")`,
    },
    [BackLanguage.Django]: {
        name: 'Django',
        language: 'python',
        iconName: 'django.svg',
        link: 'https://github.com/algolia/algoliasearch-django',
        sample: `from algoliasearch_django import AlgoliaIndex
from algoliasearch_django.decorators import register

@register(YourModel)
class YourModelIndex(AlgoliaIndex):
    fields = ('firstname', 'lastname', 'company')
`,
        code_query: `from django.contrib.algoliasearch import raw_search

params = { "hitsPerPage": 5 }
raw_search(Contact, "jim", params)
`,
    },
    [BackLanguage.Php]: {
        name: 'PHP',
        language: 'php',
        iconName: 'php.svg',
        link: 'https://github.com/algolia/algoliasearch-client-php',
        sample: `$myIndex = $apiClient->initIndex("contacts");
$myIndex->saveObject([
  "firstname" => "Jimmie",
  "lastname" => "Barninger",
  "company" => "California Paint",
]);
`,
        code_query: `var_dump($myIndex->search('jimmie b'));
`,
    },
    [BackLanguage.Symphony]: {
        name: 'Symfony',
        language: 'php',
        iconName: 'symphony.svg',
        link: 'https://github.com/algolia/search-bundle',
        sample: `/**
 * @ORM\\Entity
 */
class Contact {
  /**
   * @var string
   *
   * @ORM\\Column(name="firstname", type="string")
   * @Group({searchable})
   */
  protected $firstname;
  /**
   * @var string
   *
   * @ORM\\Column(name="lastname", type="string")
   * @Group({searchable})
   */
  protected $lastname;
  /**
   * @var string
   *
   * @ORM\\Column(name="company", type="string")
   * @Group({searchable})
   */
  protected $company;
}
`,
        code_query: `$em = $this->getDoctrine()->getManagerForClass(Contact::class);

$this->searchService->search($em, Contact::class, 'jimmy b');
`,
    },
    [BackLanguage.Laravel]: {
        name: 'Laravel',
        language: 'php',
        iconName: 'laravel.svg',
        link: 'https://github.com/algolia/scout-extended',
        sample: `use Illuminate\\Database\\Eloquent\\Model;
use Laravel\\Scout\\Searchable;

class Contact extends Model {
  use Searchable;
}
`,
        code_query: `Contact::search($query)->get();
Contact::search($query)->raw();
`,
    },
    [BackLanguage.JavascriptBack]: {
        name: 'JavaScript',
        language: 'javascript',
        iconName: 'javascript.svg',
        link: 'https://github.com/algolia/algoliasearch-client-javascript',
        sample: `const myIndex = apiClient
  .initIndex('contacts');

myIndex.saveObject({
  firstname: 'Jimmie',
  lastname: 'Barninger',
  company: 'California Paint',
})
`,
        code_query: `myIndex.search('jimmie b')
`,
    },
    [BackLanguage.Java]: {
        name: 'Java',
        language: 'java',
        iconName: 'java.svg',
        link: 'https://github.com/algolia/algoliasearch-client-java-2',
        sample: `Index<Contact> index = client
  .initIndex("contacts", Contact.class);

index.saveObject(
  new Contact()
    .setFirstname("Jimmie")
    .setLastname("Barninger")
    .setCompany("California Paint")
);
`,
        code_query: `System.out.println(myIndex.search(new Query("jimmie b")));
`,
    },
    [BackLanguage.Scala]: {
        name: 'Scala',
        language: 'javascript',
        iconName: 'scala.svg',
        link: 'https://github.com/algolia/algoliasearch-client-scala',
        sample: `import algolia.AlgoliaDsl._
import scala.concurrent.ExecutionContext.Implicits.global

case class Contact(
  firstname: String,
  lastname: String,
  company: String
)

val indexing: Future[Indexing] = client.execute {
  index into "contacts" \`object\` Contact(
    "Jimmie",
    "Barninger",
    "California Paint"
  )
}
`,
        code_query: `client.execute {
  search into "contacts" query Query(query = Some("jimmie b"))
}
`,
    },
    [BackLanguage.Go]: {
        name: 'Go',
        language: 'go',
        iconName: 'go.svg',
        link: 'https://github.com/algolia/algoliasearch-client-go',
        sample: `object := map[string]string{
  "firstname": "Jimmie",
  "lastname":  "Barninger",
  "company":   "California Paint"
}
res, err := index.SaveObject(object)
`,
        code_query: `res, err := index.Search("jimmie b", params)
`,
    },
    [BackLanguage.CSharp]: {
        name: 'C#',
        language: 'clike',
        iconName: 'csharp.svg',
        link: 'https://github.com/algolia/algoliasearch-client-csharp',
        sample: `SearchIndex index = client.InitIndex("contacts");
var contact = new Contact {
  FirstName = "Jimmie",
  LastName = "Barninger",
  Company = "California Paint"
};
index.SaveObject(contact);
`,
        code_query: `var result = index.Search<Contact>(new Query("jimmie b"));
Console.WriteLine(result.Hits);
`,
    },
    [BackLanguage.Kotlin]: {
        name: 'Kotlin',
        language: 'java',
        iconName: 'kotlin.svg',
        link: 'https://github.com/algolia/algoliasearch-client-kotlin',
        sample: `val index = client.initIndex(IndexName("contacts"))

val json = json {
  "firstname" to "Jimmie"
  "lastname" to "Barninger"
  "company" to "California Paint" }

index.saveObject(json)
`,
        code_query: `index.search(Query("jimmie b"))
`,
    },
    [BackLanguage.Swift]: {
        name: 'Swift',
        language: 'swift',
        iconName: 'swift.svg',
        link: 'https://github.com/algolia/algoliasearch-client-swift',
        sample: `let myIndex = apiClient.getIndex("contacts")

let n = [
  "firstname": "Jimmie",
  "lastname": "Barninger",
  "company": "California Paint"
]

myIndex.saveObject(n)
`,
        code_query: `myIndex.search(Query(query: "jimmie b"), block: { (content, error) -> Void in
  if (error == nil) {
    println(content)
  }
})
`,
    },
    [BackLanguage.AndroidBack]: {
        name: 'Android',
        language: 'java',
        iconName: 'android.svg',
        link: 'https://github.com/algolia/instantsearch-android',
        sample: `Index myIndex = apiClient.initIndex("contacts");
JSONObject jsonObject = new JSONObject()
  .put("firstname", "Jimmie")
  .put("lastname", "Barninger")
  .put("company", "California Paint");
myIndex.addObjectAsync(jsonObject, null);
`,
        code_query: `myIndex.searchASync(new Query("jimmie b"), this);
`,
    },
};
export const front = {
    [FrontLanguage.JavascriptFront]: {
        name: 'JavaScript',
        language: 'html',
        iconName: 'javascript.svg',
        link: 'https://github.com/algolia/algoliasearch-client-javascript',
        sample: `<div id="searchbox"></div>
<div id="refinement"></div>
<div id="hits"></div>

<script>
const {
  searchBox,
  hits
} = instantsearch.widgets;

search.addWidgets([
  searchBox({
    container: "#searchbox"
  }),
  hits({
    container: "#hits"
  }),
  refinementList({
    container: "#refinement",
    attribute: "company"
  }),
]);

search.start();
</script>`,
    },
    [FrontLanguage.React]: {
        name: 'React',
        language: 'jsx',
        iconName: 'react.svg',
        link: 'https://github.com/algolia/react-instantsearch',
        sample: `const App = () => (
<InstantSearch>
  <SearchBox />
  <Hits />
  <Pagination />
  <RefinementList
    attribute="company"
  />
</InstantSearch>
);
`,
    },
    [FrontLanguage.AndroidFront]: {
        name: 'Android',
        language: 'java',
        iconName: 'android.svg',
        link: 'https://github.com/algolia/instantsearch-android',
        sample: `<RelativeLayout
xmlns:algolia="http://schemas.android.com/apk/res-auto"
xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent">

<com.algolia.instantsearch.ui.views.SearchBox
  android:id="@+id/search_box"
  android:layout_width="match_parent"
  android:layout_height="wrap_content"/>

<com.algolia.instantsearch.ui.views.Stats
  android:id="@+id/search_box"
  android:layout_width="match_parent"
  android:layout_height="wrap_content"/>

<com.algolia.instantsearch.ui.views.Hits
  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  algolia:itemLayout="@layout/hits_item"/>
</RelativeLayout>
`,
    },
    [FrontLanguage.Vue]: {
        name: 'Vue',
        language: 'jsx',
        iconName: 'vue.svg',
        link: 'https://github.com/algolia/vue-instantsearch',
        sample: `<ais-instant-search>
<ais-search-box />
<ais-refinement-list
  attribute="company"
/>
<ais-hits />
<ais-pagination />
</ais-instant-search>
`,
    },
    [FrontLanguage.Angular]: {
        name: 'Angular',
        language: 'jsx',
        iconName: 'angular.svg',
        link: 'https://github.com/algolia/angular-instantsearch',
        sample: `<ais-instantsearch>
<ais-search-box></ais-search-box>
<ais-refinement-list
  [attribute]="company"
></ais-refinement-list>
<ais-hits></ais-hits>
</ais-instantsearch>
`,
    },
    [FrontLanguage.Ios]: {
        name: 'iOS',
        language: 'swift',
        iconName: 'ios.svg',
        link: 'https://github.com/algolia/instantsearch-ios',
        sample: `import InstantSearch

override func viewDidLoad() {
super.viewDidLoad()

let searchBar = SearchBarWidget(frame: ...)
let statsWidget = StatsLabelWidget(frame: ...)
self.view.addSubview(searchBar)
self.view.addSubview(statsWidget)

InstantSearch.shared.registerAllWidgets(in: self.view)}
`,
    },
};
export default { ...back, ...front };
