/** @jsxRuntime classic /
/** @jsx jsx */
import { useState, useRef, useEffect } from 'react';
import cx from 'classnames';
import { jsx } from '@emotion/react';
import { ChevronDown, ChevronUp } from 'react-feather';
import styles from './Dropdown.css';
import { useOnClickOutside } from '../../helpers/hooks/useOnClickOutside';
import { useKeyPress } from '../../helpers/hooks/useKeyPress';
const BORDER_RADIUSES = {
    0: 'uil-bdr-0',
    2: 'uil-bdr-2',
    4: 'uil-bdr-4',
    6: 'uil-bdr-6',
    8: 'uil-bdr-8',
};
const renderIcon = (icon, iconProps) => {
    const CustomIconTag = icon;
    const { className: otherClassName, css: otherCss, ...otherProps } = iconProps;
    return (jsx(CustomIconTag, Object.assign({}, otherProps, { css: [styles.icon, otherCss], "aria-hidden": true, className: cx('uil-pos-relative uil-fxs-0 uil-mr-8', otherClassName) })));
};
const renderLabel = (counter, label, refinedLabel) => {
    if (counter === 0)
        return label;
    if (counter === 1)
        return (refinedLabel && refinedLabel.single) || label;
    if (counter > 1)
        return (refinedLabel && refinedLabel.multiple) || label;
    return false;
};
/**
 * This component allows you to create simple and elegant dropdowns based on either
 * a `data` attribute that will receive an object, or an InstantSearch facet attribute.
 */
const Dropdown = ({ borderColor = 'light-grey', borderRadius = 4, children, count = 0, disabled, icon, iconProps = {}, label, refinedLabel = {}, ...other }) => {
    const [showList, setShowList] = useState(false);
    const [counter, setCounter] = useState(count);
    const dropdownRef = useRef(null);
    const listRef = useRef(null);
    const { className: otherClassName, ...otherProps } = other;
    useEffect(() => {
        if (listRef.current) {
            listRef.current.addEventListener('click', () => {
                const checkedBoxes = listRef.current &&
                    listRef.current.querySelectorAll('input[type=checkbox]:checked');
                checkedBoxes && !count && setCounter(checkedBoxes.length);
            });
        }
    }, []);
    useEffect(() => {
        setCounter(count);
    }, [count]);
    dropdownRef &&
        useOnClickOutside(dropdownRef, () => showList ? setShowList(false) : null);
    useKeyPress('Escape', () => {
        setShowList(false);
    });
    return (jsx("div", Object.assign({}, otherProps, { className: cx('uil-pos-relative uil-miw-200', borderColor !== 'transparent' && `uil-bdw-1 uil-bds-solid`, borderColor === 'light-grey'
            ? 'uil-bdc-grey-200'
            : 'uil-bdc-transparent', BORDER_RADIUSES[borderRadius], disabled && 'uil-op-75p', otherClassName), ref: dropdownRef }),
        jsx("button", { disabled: disabled, onClick: () => setShowList(!showList), className: cx('uil-app-none uil-ff-poppins uil-bdw-0 uil-d-flex uil-ai-center uil-jc-between uil-fsz-14 uil-ph-16 uil-bgc-transparent uil-h-40 uil-w-100p lg:uil-fsz-16', disabled
                ? 'uil-cursor-not-allowed uil-color-grey-400'
                : 'uil-cursor-pointer uil-color-grey-500', BORDER_RADIUSES[borderRadius]) },
            jsx("span", { className: "uil-d-flex uil-ai-center" },
                icon && renderIcon(icon, iconProps),
                ' ',
                counter > 0 && (jsx("span", { className: "uil-fsz-12 uil-fw-bold uil-bgc-grey-100 uil-bdr-4 uil-mr-8", css: styles.labelCount }, counter)),
                jsx("span", null, renderLabel(counter, label, refinedLabel))),
            showList ? (jsx(ChevronUp, { className: "stroke-current" })) : (jsx(ChevronDown, { className: "stroke-current" }))),
        jsx("ul", { className: cx('uil-lis-none uil-p-0 uil-mv-8 uil-pos-absolute uil-z-4 uil-top-32 uil-left-0 uil-d-flex uil-fxd-column uil-bxs-large uil-ov-hidden uil-w-100p', showList ? 'uil-op-1 uil-v-visible' : 'uil-op-0 uil-v-hidden', BORDER_RADIUSES[borderRadius]), css: [
                styles.listRoot,
                showList ? styles.listAppear : styles.listHidden,
            ], ref: listRef }, children)));
};
export default Dropdown;
