/** @jsxRuntime classic /
/** @jsx jsx */
import { Children, Fragment } from 'react';
import cx from 'classnames';
import { jsx } from '@emotion/react';
const COLORS = {
    blue: 'uil-color-nebula-500',
    green: 'uil-color-green-700',
    grey: 'uil-color-grey-800',
    orange: 'uil-color-orange-600',
    pink: 'uil-color-pink-600',
    red: 'uil-color-red-600',
    white: 'uil-color-white',
};
const renderChildren = (children, required, optional) => {
    const content = () => {
        switch (true) {
            default:
            case required:
                return 'required';
            case optional:
                return 'optional';
        }
    };
    return Children.map(children, (item, index) => {
        if ((optional || required) &&
            item &&
            typeof item !== 'undefined' &&
            index === 0) {
            return (jsx(Fragment, null,
                item,
                jsx("span", { className: "uil-ff-poppins uil-fw-semibold uil-ml-8 uil-lsp-normal uil-tt-lower uil-color-nova uil-d-inline-block" }, content())));
        }
        return item;
    });
};
/** The `LabelText`, as the name would suggest, is primarily used as a label for forms, but also for shorter texts, mostly as additional information like category or type.
 *
 * It is important to note that the tag defaults to a `span`, not `label`.
 * */
const LabelText = ({ big = false, children, color = 'grey', font = 'poppins', icon: CustomIconTag, iconProps = {}, optional = false, required = false, tag = 'span', ...other }) => {
    const CustomTag = other.href ? 'a' : tag;
    const { className: iconClassName, ...otherIconProps } = iconProps;
    const { className: otherClassName, ...otherProps } = other;
    return (jsx(CustomTag, Object.assign({}, otherProps, { className: cx('uil-tt-upper uil-fw-semibold uil-lsp-big', font === 'poppins' ? 'uil-ff-poppins' : 'uil-ff-jetbrains', COLORS[color], CustomIconTag && 'uil-d-flex uil-ai-center', big ? 'uil-fsz-14 lg:uil-fsz-16' : 'uil-fsz-11 lg:uil-fsz-12', otherClassName) }),
        CustomIconTag && (jsx(CustomIconTag, Object.assign({}, otherIconProps, { className: cx('uil-mr-8 uil-w-18 uil-h-18 uil-fxs-0 lg:uil-w-24 lg:uil-h-24', iconClassName) }))),
        renderChildren(children, required, optional)));
};
export default LabelText;
