"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeOverflowHiddenBody = exports.isVideoEmbed = exports.slugify = exports.getColorFromColorType = exports.truncate = exports.capitalize = exports.isInternalLink = exports.isBrowser = void 0;
const { colors } = require('../fragments/fragments');
exports.isBrowser = typeof window !== 'undefined';
exports.isInternalLink = (link, externalRoutes) => !new RegExp(`(^[A-Za-z])${externalRoutes.length > 0
    ? `|(^\\/(${externalRoutes.join('|')})(\\/|\\?|$))`
    : ''}`).test(link);
exports.capitalize = (string) => string
    .split(' ')
    .map(s => s.charAt(0).toUpperCase() + s.substring(1))
    .join(' ');
exports.truncate = (input, value) => input.length > value ? `${input.substring(0, value)}â€¦` : input;
exports.getColorFromColorType = (color, defaultValue = colors.nebula) => {
    if (color) {
        const formattedColorArray = color.split('-');
        const prefix = formattedColorArray[0];
        if (formattedColorArray.length === 2) {
            const index = formattedColorArray[1];
            return colors[prefix][index];
        }
        return colors[prefix];
    }
    return defaultValue;
};
exports.slugify = (item) => item
    .replace(/\s/g, '-')
    .replace(/[^\w-]/g, '')
    .replace(/-+/g, '-')
    .replace(/(-?\s*)$/g, '')
    .toLowerCase();
exports.isVideoEmbed = (url) => {
    if (url.includes('play.vidyard.com'))
        return 'vidyard';
    if (url.includes('player.vimeo.com'))
        return 'vimeo';
    if (url.includes('www.youtube.com/embed'))
        return 'youtube';
    return false;
};
exports.removeOverflowHiddenBody = () => document.body.classList.remove('uil-ov-hidden');
//# sourceMappingURL=index.js.map